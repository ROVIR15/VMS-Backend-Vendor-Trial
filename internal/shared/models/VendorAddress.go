// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VendorAddress is an object representing the database table.
type VendorAddress struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	VendorID  null.Int    `boil:"vendor_id" json:"vendor_id,omitempty" toml:"vendor_id" yaml:"vendor_id,omitempty"`
	Address   null.String `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`
	Location  null.String `boil:"location" json:"location,omitempty" toml:"location" yaml:"location,omitempty"`
	IsPrimary null.Bool   `boil:"is_primary" json:"is_primary,omitempty" toml:"is_primary" yaml:"is_primary,omitempty"`

	R *vendorAddressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vendorAddressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VendorAddressColumns = struct {
	ID        string
	VendorID  string
	Address   string
	Location  string
	IsPrimary string
}{
	ID:        "id",
	VendorID:  "vendor_id",
	Address:   "address",
	Location:  "location",
	IsPrimary: "is_primary",
}

var VendorAddressTableColumns = struct {
	ID        string
	VendorID  string
	Address   string
	Location  string
	IsPrimary string
}{
	ID:        "VendorAddress.id",
	VendorID:  "VendorAddress.vendor_id",
	Address:   "VendorAddress.address",
	Location:  "VendorAddress.location",
	IsPrimary: "VendorAddress.is_primary",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var VendorAddressWhere = struct {
	ID        whereHelperint
	VendorID  whereHelpernull_Int
	Address   whereHelpernull_String
	Location  whereHelpernull_String
	IsPrimary whereHelpernull_Bool
}{
	ID:        whereHelperint{field: "\"VendorAddress\".\"id\""},
	VendorID:  whereHelpernull_Int{field: "\"VendorAddress\".\"vendor_id\""},
	Address:   whereHelpernull_String{field: "\"VendorAddress\".\"address\""},
	Location:  whereHelpernull_String{field: "\"VendorAddress\".\"location\""},
	IsPrimary: whereHelpernull_Bool{field: "\"VendorAddress\".\"is_primary\""},
}

// VendorAddressRels is where relationship names are stored.
var VendorAddressRels = struct {
	Vendor                                 string
	VendorAddressVendorAddressTranslations string
}{
	Vendor:                                 "Vendor",
	VendorAddressVendorAddressTranslations: "VendorAddressVendorAddressTranslations",
}

// vendorAddressR is where relationships are stored.
type vendorAddressR struct {
	Vendor                                 *Vendor                       `boil:"Vendor" json:"Vendor" toml:"Vendor" yaml:"Vendor"`
	VendorAddressVendorAddressTranslations VendorAddressTranslationSlice `boil:"VendorAddressVendorAddressTranslations" json:"VendorAddressVendorAddressTranslations" toml:"VendorAddressVendorAddressTranslations" yaml:"VendorAddressVendorAddressTranslations"`
}

// NewStruct creates a new relationship struct
func (*vendorAddressR) NewStruct() *vendorAddressR {
	return &vendorAddressR{}
}

func (r *vendorAddressR) GetVendor() *Vendor {
	if r == nil {
		return nil
	}
	return r.Vendor
}

func (r *vendorAddressR) GetVendorAddressVendorAddressTranslations() VendorAddressTranslationSlice {
	if r == nil {
		return nil
	}
	return r.VendorAddressVendorAddressTranslations
}

// vendorAddressL is where Load methods for each relationship are stored.
type vendorAddressL struct{}

var (
	vendorAddressAllColumns            = []string{"id", "vendor_id", "address", "location", "is_primary"}
	vendorAddressColumnsWithoutDefault = []string{}
	vendorAddressColumnsWithDefault    = []string{"id", "vendor_id", "address", "location", "is_primary"}
	vendorAddressPrimaryKeyColumns     = []string{"id"}
	vendorAddressGeneratedColumns      = []string{}
)

type (
	// VendorAddressSlice is an alias for a slice of pointers to VendorAddress.
	// This should almost always be used instead of []VendorAddress.
	VendorAddressSlice []*VendorAddress
	// VendorAddressHook is the signature for custom VendorAddress hook methods
	VendorAddressHook func(context.Context, boil.ContextExecutor, *VendorAddress) error

	vendorAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vendorAddressType                 = reflect.TypeOf(&VendorAddress{})
	vendorAddressMapping              = queries.MakeStructMapping(vendorAddressType)
	vendorAddressPrimaryKeyMapping, _ = queries.BindMapping(vendorAddressType, vendorAddressMapping, vendorAddressPrimaryKeyColumns)
	vendorAddressInsertCacheMut       sync.RWMutex
	vendorAddressInsertCache          = make(map[string]insertCache)
	vendorAddressUpdateCacheMut       sync.RWMutex
	vendorAddressUpdateCache          = make(map[string]updateCache)
	vendorAddressUpsertCacheMut       sync.RWMutex
	vendorAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vendorAddressAfterSelectMu sync.Mutex
var vendorAddressAfterSelectHooks []VendorAddressHook

var vendorAddressBeforeInsertMu sync.Mutex
var vendorAddressBeforeInsertHooks []VendorAddressHook
var vendorAddressAfterInsertMu sync.Mutex
var vendorAddressAfterInsertHooks []VendorAddressHook

var vendorAddressBeforeUpdateMu sync.Mutex
var vendorAddressBeforeUpdateHooks []VendorAddressHook
var vendorAddressAfterUpdateMu sync.Mutex
var vendorAddressAfterUpdateHooks []VendorAddressHook

var vendorAddressBeforeDeleteMu sync.Mutex
var vendorAddressBeforeDeleteHooks []VendorAddressHook
var vendorAddressAfterDeleteMu sync.Mutex
var vendorAddressAfterDeleteHooks []VendorAddressHook

var vendorAddressBeforeUpsertMu sync.Mutex
var vendorAddressBeforeUpsertHooks []VendorAddressHook
var vendorAddressAfterUpsertMu sync.Mutex
var vendorAddressAfterUpsertHooks []VendorAddressHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VendorAddress) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VendorAddress) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VendorAddress) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VendorAddress) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VendorAddress) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VendorAddress) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VendorAddress) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VendorAddress) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VendorAddress) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVendorAddressHook registers your hook function for all future operations.
func AddVendorAddressHook(hookPoint boil.HookPoint, vendorAddressHook VendorAddressHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vendorAddressAfterSelectMu.Lock()
		vendorAddressAfterSelectHooks = append(vendorAddressAfterSelectHooks, vendorAddressHook)
		vendorAddressAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		vendorAddressBeforeInsertMu.Lock()
		vendorAddressBeforeInsertHooks = append(vendorAddressBeforeInsertHooks, vendorAddressHook)
		vendorAddressBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		vendorAddressAfterInsertMu.Lock()
		vendorAddressAfterInsertHooks = append(vendorAddressAfterInsertHooks, vendorAddressHook)
		vendorAddressAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		vendorAddressBeforeUpdateMu.Lock()
		vendorAddressBeforeUpdateHooks = append(vendorAddressBeforeUpdateHooks, vendorAddressHook)
		vendorAddressBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		vendorAddressAfterUpdateMu.Lock()
		vendorAddressAfterUpdateHooks = append(vendorAddressAfterUpdateHooks, vendorAddressHook)
		vendorAddressAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		vendorAddressBeforeDeleteMu.Lock()
		vendorAddressBeforeDeleteHooks = append(vendorAddressBeforeDeleteHooks, vendorAddressHook)
		vendorAddressBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		vendorAddressAfterDeleteMu.Lock()
		vendorAddressAfterDeleteHooks = append(vendorAddressAfterDeleteHooks, vendorAddressHook)
		vendorAddressAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		vendorAddressBeforeUpsertMu.Lock()
		vendorAddressBeforeUpsertHooks = append(vendorAddressBeforeUpsertHooks, vendorAddressHook)
		vendorAddressBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		vendorAddressAfterUpsertMu.Lock()
		vendorAddressAfterUpsertHooks = append(vendorAddressAfterUpsertHooks, vendorAddressHook)
		vendorAddressAfterUpsertMu.Unlock()
	}
}

// One returns a single vendorAddress record from the query.
func (q vendorAddressQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VendorAddress, error) {
	o := &VendorAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for VendorAddress")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VendorAddress records from the query.
func (q vendorAddressQuery) All(ctx context.Context, exec boil.ContextExecutor) (VendorAddressSlice, error) {
	var o []*VendorAddress

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VendorAddress slice")
	}

	if len(vendorAddressAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VendorAddress records in the query.
func (q vendorAddressQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count VendorAddress rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vendorAddressQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if VendorAddress exists")
	}

	return count > 0, nil
}

// Vendor pointed to by the foreign key.
func (o *VendorAddress) Vendor(mods ...qm.QueryMod) vendorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VendorID),
	}

	queryMods = append(queryMods, mods...)

	return Vendors(queryMods...)
}

// VendorAddressVendorAddressTranslations retrieves all the VendorAddressTranslation's VendorAddressTranslations with an executor via vendor_address_id column.
func (o *VendorAddress) VendorAddressVendorAddressTranslations(mods ...qm.QueryMod) vendorAddressTranslationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"VendorAddressTranslation\".\"vendor_address_id\"=?", o.ID),
	)

	return VendorAddressTranslations(queryMods...)
}

// LoadVendor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vendorAddressL) LoadVendor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendorAddress interface{}, mods queries.Applicator) error {
	var slice []*VendorAddress
	var object *VendorAddress

	if singular {
		var ok bool
		object, ok = maybeVendorAddress.(*VendorAddress)
		if !ok {
			object = new(VendorAddress)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendorAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendorAddress))
			}
		}
	} else {
		s, ok := maybeVendorAddress.(*[]*VendorAddress)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendorAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendorAddress))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorAddressR{}
		}
		if !queries.IsNil(object.VendorID) {
			args[object.VendorID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorAddressR{}
			}

			if !queries.IsNil(obj.VendorID) {
				args[obj.VendorID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`Vendors`),
		qm.WhereIn(`Vendors.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Vendor")
	}

	var resultSlice []*Vendor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Vendor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Vendors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Vendors")
	}

	if len(vendorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Vendor = foreign
		if foreign.R == nil {
			foreign.R = &vendorR{}
		}
		foreign.R.VendorVendorAddresses = append(foreign.R.VendorVendorAddresses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.VendorID, foreign.ID) {
				local.R.Vendor = foreign
				if foreign.R == nil {
					foreign.R = &vendorR{}
				}
				foreign.R.VendorVendorAddresses = append(foreign.R.VendorVendorAddresses, local)
				break
			}
		}
	}

	return nil
}

// LoadVendorAddressVendorAddressTranslations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (vendorAddressL) LoadVendorAddressVendorAddressTranslations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendorAddress interface{}, mods queries.Applicator) error {
	var slice []*VendorAddress
	var object *VendorAddress

	if singular {
		var ok bool
		object, ok = maybeVendorAddress.(*VendorAddress)
		if !ok {
			object = new(VendorAddress)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendorAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendorAddress))
			}
		}
	} else {
		s, ok := maybeVendorAddress.(*[]*VendorAddress)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendorAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendorAddress))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorAddressR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorAddressR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`VendorAddressTranslation`),
		qm.WhereIn(`VendorAddressTranslation.vendor_address_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VendorAddressTranslation")
	}

	var resultSlice []*VendorAddressTranslation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VendorAddressTranslation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on VendorAddressTranslation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for VendorAddressTranslation")
	}

	if len(vendorAddressTranslationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VendorAddressVendorAddressTranslations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &vendorAddressTranslationR{}
			}
			foreign.R.VendorAddress = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VendorAddressID {
				local.R.VendorAddressVendorAddressTranslations = append(local.R.VendorAddressVendorAddressTranslations, foreign)
				if foreign.R == nil {
					foreign.R = &vendorAddressTranslationR{}
				}
				foreign.R.VendorAddress = local
				break
			}
		}
	}

	return nil
}

// SetVendor of the vendorAddress to the related item.
// Sets o.R.Vendor to related.
// Adds o to related.R.VendorVendorAddresses.
func (o *VendorAddress) SetVendor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Vendor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"VendorAddress\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_id"}),
		strmangle.WhereClause("\"", "\"", 2, vendorAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.VendorID, related.ID)
	if o.R == nil {
		o.R = &vendorAddressR{
			Vendor: related,
		}
	} else {
		o.R.Vendor = related
	}

	if related.R == nil {
		related.R = &vendorR{
			VendorVendorAddresses: VendorAddressSlice{o},
		}
	} else {
		related.R.VendorVendorAddresses = append(related.R.VendorVendorAddresses, o)
	}

	return nil
}

// RemoveVendor relationship.
// Sets o.R.Vendor to nil.
// Removes o from all passed in related items' relationships struct.
func (o *VendorAddress) RemoveVendor(ctx context.Context, exec boil.ContextExecutor, related *Vendor) error {
	var err error

	queries.SetScanner(&o.VendorID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("vendor_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Vendor = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.VendorVendorAddresses {
		if queries.Equal(o.VendorID, ri.VendorID) {
			continue
		}

		ln := len(related.R.VendorVendorAddresses)
		if ln > 1 && i < ln-1 {
			related.R.VendorVendorAddresses[i] = related.R.VendorVendorAddresses[ln-1]
		}
		related.R.VendorVendorAddresses = related.R.VendorVendorAddresses[:ln-1]
		break
	}
	return nil
}

// AddVendorAddressVendorAddressTranslations adds the given related objects to the existing relationships
// of the VendorAddress, optionally inserting them as new records.
// Appends related to o.R.VendorAddressVendorAddressTranslations.
// Sets related.R.VendorAddress appropriately.
func (o *VendorAddress) AddVendorAddressVendorAddressTranslations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VendorAddressTranslation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VendorAddressID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"VendorAddressTranslation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_address_id"}),
				strmangle.WhereClause("\"", "\"", 2, vendorAddressTranslationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.VendorAddressID, rel.LanguageID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VendorAddressID = o.ID
		}
	}

	if o.R == nil {
		o.R = &vendorAddressR{
			VendorAddressVendorAddressTranslations: related,
		}
	} else {
		o.R.VendorAddressVendorAddressTranslations = append(o.R.VendorAddressVendorAddressTranslations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &vendorAddressTranslationR{
				VendorAddress: o,
			}
		} else {
			rel.R.VendorAddress = o
		}
	}
	return nil
}

// VendorAddresses retrieves all the records using an executor.
func VendorAddresses(mods ...qm.QueryMod) vendorAddressQuery {
	mods = append(mods, qm.From("\"VendorAddress\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"VendorAddress\".*"})
	}

	return vendorAddressQuery{q}
}

// FindVendorAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVendorAddress(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*VendorAddress, error) {
	vendorAddressObj := &VendorAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"VendorAddress\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, vendorAddressObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from VendorAddress")
	}

	if err = vendorAddressObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vendorAddressObj, err
	}

	return vendorAddressObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VendorAddress) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no VendorAddress provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorAddressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vendorAddressInsertCacheMut.RLock()
	cache, cached := vendorAddressInsertCache[key]
	vendorAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vendorAddressAllColumns,
			vendorAddressColumnsWithDefault,
			vendorAddressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vendorAddressType, vendorAddressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vendorAddressType, vendorAddressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"VendorAddress\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"VendorAddress\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into VendorAddress")
	}

	if !cached {
		vendorAddressInsertCacheMut.Lock()
		vendorAddressInsertCache[key] = cache
		vendorAddressInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VendorAddress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VendorAddress) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vendorAddressUpdateCacheMut.RLock()
	cache, cached := vendorAddressUpdateCache[key]
	vendorAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vendorAddressAllColumns,
			vendorAddressPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update VendorAddress, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"VendorAddress\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vendorAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vendorAddressType, vendorAddressMapping, append(wl, vendorAddressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update VendorAddress row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for VendorAddress")
	}

	if !cached {
		vendorAddressUpdateCacheMut.Lock()
		vendorAddressUpdateCache[key] = cache
		vendorAddressUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vendorAddressQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for VendorAddress")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for VendorAddress")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VendorAddressSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"VendorAddress\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vendorAddressPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vendorAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vendorAddress")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VendorAddress) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no VendorAddress provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorAddressColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vendorAddressUpsertCacheMut.RLock()
	cache, cached := vendorAddressUpsertCache[key]
	vendorAddressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			vendorAddressAllColumns,
			vendorAddressColumnsWithDefault,
			vendorAddressColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vendorAddressAllColumns,
			vendorAddressPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert VendorAddress, could not build update column list")
		}

		ret := strmangle.SetComplement(vendorAddressAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(vendorAddressPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert VendorAddress, could not build conflict column list")
			}

			conflict = make([]string, len(vendorAddressPrimaryKeyColumns))
			copy(conflict, vendorAddressPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"VendorAddress\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(vendorAddressType, vendorAddressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vendorAddressType, vendorAddressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert VendorAddress")
	}

	if !cached {
		vendorAddressUpsertCacheMut.Lock()
		vendorAddressUpsertCache[key] = cache
		vendorAddressUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VendorAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VendorAddress) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VendorAddress provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vendorAddressPrimaryKeyMapping)
	sql := "DELETE FROM \"VendorAddress\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from VendorAddress")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for VendorAddress")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vendorAddressQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vendorAddressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from VendorAddress")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for VendorAddress")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VendorAddressSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vendorAddressBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"VendorAddress\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorAddressPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vendorAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for VendorAddress")
	}

	if len(vendorAddressAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VendorAddress) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVendorAddress(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VendorAddressSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VendorAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"VendorAddress\".* FROM \"VendorAddress\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorAddressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VendorAddressSlice")
	}

	*o = slice

	return nil
}

// VendorAddressExists checks if the VendorAddress row exists.
func VendorAddressExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"VendorAddress\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if VendorAddress exists")
	}

	return exists, nil
}

// Exists checks if the VendorAddress row exists.
func (o *VendorAddress) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VendorAddressExists(ctx, exec, o.ID)
}
