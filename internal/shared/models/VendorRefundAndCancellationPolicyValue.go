// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VendorRefundAndCancellationPolicyValue is an object representing the database table.
type VendorRefundAndCancellationPolicyValue struct {
	ID                                  int      `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	VendorRefundAndCancellationPolicyID int      `boil:"vendor_refund_and_cancellation_policy_id" json:"vendor_refund_and_cancellation_policy_id" toml:"vendor_refund_and_cancellation_policy_id" yaml:"vendor_refund_and_cancellation_policy_id"`
	IsFullRefund                        bool     `boil:"is_full_refund" json:"is_full_refund" toml:"is_full_refund" yaml:"is_full_refund"`
	Percentage                          float32  `boil:"percentage" json:"percentage" toml:"percentage" yaml:"percentage"`
	DaysPriorMoreThanOrEqual            int      `boil:"days_prior_more_than_or_equal" json:"days_prior_more_than_or_equal" toml:"days_prior_more_than_or_equal" yaml:"days_prior_more_than_or_equal"`
	DaysPriorLessThan                   int      `boil:"days_prior_less_than" json:"days_prior_less_than" toml:"days_prior_less_than" yaml:"days_prior_less_than"`
	GracePeriod                         int      `boil:"grace_period" json:"grace_period" toml:"grace_period" yaml:"grace_period"`
	Order                               null.Int `boil:"order" json:"order,omitempty" toml:"order" yaml:"order,omitempty"`

	R *vendorRefundAndCancellationPolicyValueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vendorRefundAndCancellationPolicyValueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VendorRefundAndCancellationPolicyValueColumns = struct {
	ID                                  string
	VendorRefundAndCancellationPolicyID string
	IsFullRefund                        string
	Percentage                          string
	DaysPriorMoreThanOrEqual            string
	DaysPriorLessThan                   string
	GracePeriod                         string
	Order                               string
}{
	ID:                                  "ID",
	VendorRefundAndCancellationPolicyID: "vendor_refund_and_cancellation_policy_id",
	IsFullRefund:                        "is_full_refund",
	Percentage:                          "percentage",
	DaysPriorMoreThanOrEqual:            "days_prior_more_than_or_equal",
	DaysPriorLessThan:                   "days_prior_less_than",
	GracePeriod:                         "grace_period",
	Order:                               "order",
}

var VendorRefundAndCancellationPolicyValueTableColumns = struct {
	ID                                  string
	VendorRefundAndCancellationPolicyID string
	IsFullRefund                        string
	Percentage                          string
	DaysPriorMoreThanOrEqual            string
	DaysPriorLessThan                   string
	GracePeriod                         string
	Order                               string
}{
	ID:                                  "VendorRefundAndCancellationPolicyValue.ID",
	VendorRefundAndCancellationPolicyID: "VendorRefundAndCancellationPolicyValue.vendor_refund_and_cancellation_policy_id",
	IsFullRefund:                        "VendorRefundAndCancellationPolicyValue.is_full_refund",
	Percentage:                          "VendorRefundAndCancellationPolicyValue.percentage",
	DaysPriorMoreThanOrEqual:            "VendorRefundAndCancellationPolicyValue.days_prior_more_than_or_equal",
	DaysPriorLessThan:                   "VendorRefundAndCancellationPolicyValue.days_prior_less_than",
	GracePeriod:                         "VendorRefundAndCancellationPolicyValue.grace_period",
	Order:                               "VendorRefundAndCancellationPolicyValue.order",
}

// Generated where

var VendorRefundAndCancellationPolicyValueWhere = struct {
	ID                                  whereHelperint
	VendorRefundAndCancellationPolicyID whereHelperint
	IsFullRefund                        whereHelperbool
	Percentage                          whereHelperfloat32
	DaysPriorMoreThanOrEqual            whereHelperint
	DaysPriorLessThan                   whereHelperint
	GracePeriod                         whereHelperint
	Order                               whereHelpernull_Int
}{
	ID:                                  whereHelperint{field: "\"VendorRefundAndCancellationPolicyValue\".\"ID\""},
	VendorRefundAndCancellationPolicyID: whereHelperint{field: "\"VendorRefundAndCancellationPolicyValue\".\"vendor_refund_and_cancellation_policy_id\""},
	IsFullRefund:                        whereHelperbool{field: "\"VendorRefundAndCancellationPolicyValue\".\"is_full_refund\""},
	Percentage:                          whereHelperfloat32{field: "\"VendorRefundAndCancellationPolicyValue\".\"percentage\""},
	DaysPriorMoreThanOrEqual:            whereHelperint{field: "\"VendorRefundAndCancellationPolicyValue\".\"days_prior_more_than_or_equal\""},
	DaysPriorLessThan:                   whereHelperint{field: "\"VendorRefundAndCancellationPolicyValue\".\"days_prior_less_than\""},
	GracePeriod:                         whereHelperint{field: "\"VendorRefundAndCancellationPolicyValue\".\"grace_period\""},
	Order:                               whereHelpernull_Int{field: "\"VendorRefundAndCancellationPolicyValue\".\"order\""},
}

// VendorRefundAndCancellationPolicyValueRels is where relationship names are stored.
var VendorRefundAndCancellationPolicyValueRels = struct {
	VendorRefundAndCancellationPolicy string
}{
	VendorRefundAndCancellationPolicy: "VendorRefundAndCancellationPolicy",
}

// vendorRefundAndCancellationPolicyValueR is where relationships are stored.
type vendorRefundAndCancellationPolicyValueR struct {
	VendorRefundAndCancellationPolicy *VendorRefundAndCancellationPolicy `boil:"VendorRefundAndCancellationPolicy" json:"VendorRefundAndCancellationPolicy" toml:"VendorRefundAndCancellationPolicy" yaml:"VendorRefundAndCancellationPolicy"`
}

// NewStruct creates a new relationship struct
func (*vendorRefundAndCancellationPolicyValueR) NewStruct() *vendorRefundAndCancellationPolicyValueR {
	return &vendorRefundAndCancellationPolicyValueR{}
}

func (r *vendorRefundAndCancellationPolicyValueR) GetVendorRefundAndCancellationPolicy() *VendorRefundAndCancellationPolicy {
	if r == nil {
		return nil
	}
	return r.VendorRefundAndCancellationPolicy
}

// vendorRefundAndCancellationPolicyValueL is where Load methods for each relationship are stored.
type vendorRefundAndCancellationPolicyValueL struct{}

var (
	vendorRefundAndCancellationPolicyValueAllColumns            = []string{"ID", "vendor_refund_and_cancellation_policy_id", "is_full_refund", "percentage", "days_prior_more_than_or_equal", "days_prior_less_than", "grace_period", "order"}
	vendorRefundAndCancellationPolicyValueColumnsWithoutDefault = []string{"vendor_refund_and_cancellation_policy_id"}
	vendorRefundAndCancellationPolicyValueColumnsWithDefault    = []string{"ID", "is_full_refund", "percentage", "days_prior_more_than_or_equal", "days_prior_less_than", "grace_period", "order"}
	vendorRefundAndCancellationPolicyValuePrimaryKeyColumns     = []string{"ID"}
	vendorRefundAndCancellationPolicyValueGeneratedColumns      = []string{}
)

type (
	// VendorRefundAndCancellationPolicyValueSlice is an alias for a slice of pointers to VendorRefundAndCancellationPolicyValue.
	// This should almost always be used instead of []VendorRefundAndCancellationPolicyValue.
	VendorRefundAndCancellationPolicyValueSlice []*VendorRefundAndCancellationPolicyValue
	// VendorRefundAndCancellationPolicyValueHook is the signature for custom VendorRefundAndCancellationPolicyValue hook methods
	VendorRefundAndCancellationPolicyValueHook func(context.Context, boil.ContextExecutor, *VendorRefundAndCancellationPolicyValue) error

	vendorRefundAndCancellationPolicyValueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vendorRefundAndCancellationPolicyValueType                 = reflect.TypeOf(&VendorRefundAndCancellationPolicyValue{})
	vendorRefundAndCancellationPolicyValueMapping              = queries.MakeStructMapping(vendorRefundAndCancellationPolicyValueType)
	vendorRefundAndCancellationPolicyValuePrimaryKeyMapping, _ = queries.BindMapping(vendorRefundAndCancellationPolicyValueType, vendorRefundAndCancellationPolicyValueMapping, vendorRefundAndCancellationPolicyValuePrimaryKeyColumns)
	vendorRefundAndCancellationPolicyValueInsertCacheMut       sync.RWMutex
	vendorRefundAndCancellationPolicyValueInsertCache          = make(map[string]insertCache)
	vendorRefundAndCancellationPolicyValueUpdateCacheMut       sync.RWMutex
	vendorRefundAndCancellationPolicyValueUpdateCache          = make(map[string]updateCache)
	vendorRefundAndCancellationPolicyValueUpsertCacheMut       sync.RWMutex
	vendorRefundAndCancellationPolicyValueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vendorRefundAndCancellationPolicyValueAfterSelectMu sync.Mutex
var vendorRefundAndCancellationPolicyValueAfterSelectHooks []VendorRefundAndCancellationPolicyValueHook

var vendorRefundAndCancellationPolicyValueBeforeInsertMu sync.Mutex
var vendorRefundAndCancellationPolicyValueBeforeInsertHooks []VendorRefundAndCancellationPolicyValueHook
var vendorRefundAndCancellationPolicyValueAfterInsertMu sync.Mutex
var vendorRefundAndCancellationPolicyValueAfterInsertHooks []VendorRefundAndCancellationPolicyValueHook

var vendorRefundAndCancellationPolicyValueBeforeUpdateMu sync.Mutex
var vendorRefundAndCancellationPolicyValueBeforeUpdateHooks []VendorRefundAndCancellationPolicyValueHook
var vendorRefundAndCancellationPolicyValueAfterUpdateMu sync.Mutex
var vendorRefundAndCancellationPolicyValueAfterUpdateHooks []VendorRefundAndCancellationPolicyValueHook

var vendorRefundAndCancellationPolicyValueBeforeDeleteMu sync.Mutex
var vendorRefundAndCancellationPolicyValueBeforeDeleteHooks []VendorRefundAndCancellationPolicyValueHook
var vendorRefundAndCancellationPolicyValueAfterDeleteMu sync.Mutex
var vendorRefundAndCancellationPolicyValueAfterDeleteHooks []VendorRefundAndCancellationPolicyValueHook

var vendorRefundAndCancellationPolicyValueBeforeUpsertMu sync.Mutex
var vendorRefundAndCancellationPolicyValueBeforeUpsertHooks []VendorRefundAndCancellationPolicyValueHook
var vendorRefundAndCancellationPolicyValueAfterUpsertMu sync.Mutex
var vendorRefundAndCancellationPolicyValueAfterUpsertHooks []VendorRefundAndCancellationPolicyValueHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VendorRefundAndCancellationPolicyValue) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyValueAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VendorRefundAndCancellationPolicyValue) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyValueBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VendorRefundAndCancellationPolicyValue) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyValueAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VendorRefundAndCancellationPolicyValue) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyValueBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VendorRefundAndCancellationPolicyValue) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyValueAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VendorRefundAndCancellationPolicyValue) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyValueBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VendorRefundAndCancellationPolicyValue) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyValueAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VendorRefundAndCancellationPolicyValue) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyValueBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VendorRefundAndCancellationPolicyValue) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyValueAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVendorRefundAndCancellationPolicyValueHook registers your hook function for all future operations.
func AddVendorRefundAndCancellationPolicyValueHook(hookPoint boil.HookPoint, vendorRefundAndCancellationPolicyValueHook VendorRefundAndCancellationPolicyValueHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vendorRefundAndCancellationPolicyValueAfterSelectMu.Lock()
		vendorRefundAndCancellationPolicyValueAfterSelectHooks = append(vendorRefundAndCancellationPolicyValueAfterSelectHooks, vendorRefundAndCancellationPolicyValueHook)
		vendorRefundAndCancellationPolicyValueAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		vendorRefundAndCancellationPolicyValueBeforeInsertMu.Lock()
		vendorRefundAndCancellationPolicyValueBeforeInsertHooks = append(vendorRefundAndCancellationPolicyValueBeforeInsertHooks, vendorRefundAndCancellationPolicyValueHook)
		vendorRefundAndCancellationPolicyValueBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		vendorRefundAndCancellationPolicyValueAfterInsertMu.Lock()
		vendorRefundAndCancellationPolicyValueAfterInsertHooks = append(vendorRefundAndCancellationPolicyValueAfterInsertHooks, vendorRefundAndCancellationPolicyValueHook)
		vendorRefundAndCancellationPolicyValueAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		vendorRefundAndCancellationPolicyValueBeforeUpdateMu.Lock()
		vendorRefundAndCancellationPolicyValueBeforeUpdateHooks = append(vendorRefundAndCancellationPolicyValueBeforeUpdateHooks, vendorRefundAndCancellationPolicyValueHook)
		vendorRefundAndCancellationPolicyValueBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		vendorRefundAndCancellationPolicyValueAfterUpdateMu.Lock()
		vendorRefundAndCancellationPolicyValueAfterUpdateHooks = append(vendorRefundAndCancellationPolicyValueAfterUpdateHooks, vendorRefundAndCancellationPolicyValueHook)
		vendorRefundAndCancellationPolicyValueAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		vendorRefundAndCancellationPolicyValueBeforeDeleteMu.Lock()
		vendorRefundAndCancellationPolicyValueBeforeDeleteHooks = append(vendorRefundAndCancellationPolicyValueBeforeDeleteHooks, vendorRefundAndCancellationPolicyValueHook)
		vendorRefundAndCancellationPolicyValueBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		vendorRefundAndCancellationPolicyValueAfterDeleteMu.Lock()
		vendorRefundAndCancellationPolicyValueAfterDeleteHooks = append(vendorRefundAndCancellationPolicyValueAfterDeleteHooks, vendorRefundAndCancellationPolicyValueHook)
		vendorRefundAndCancellationPolicyValueAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		vendorRefundAndCancellationPolicyValueBeforeUpsertMu.Lock()
		vendorRefundAndCancellationPolicyValueBeforeUpsertHooks = append(vendorRefundAndCancellationPolicyValueBeforeUpsertHooks, vendorRefundAndCancellationPolicyValueHook)
		vendorRefundAndCancellationPolicyValueBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		vendorRefundAndCancellationPolicyValueAfterUpsertMu.Lock()
		vendorRefundAndCancellationPolicyValueAfterUpsertHooks = append(vendorRefundAndCancellationPolicyValueAfterUpsertHooks, vendorRefundAndCancellationPolicyValueHook)
		vendorRefundAndCancellationPolicyValueAfterUpsertMu.Unlock()
	}
}

// One returns a single vendorRefundAndCancellationPolicyValue record from the query.
func (q vendorRefundAndCancellationPolicyValueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VendorRefundAndCancellationPolicyValue, error) {
	o := &VendorRefundAndCancellationPolicyValue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for VendorRefundAndCancellationPolicyValue")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VendorRefundAndCancellationPolicyValue records from the query.
func (q vendorRefundAndCancellationPolicyValueQuery) All(ctx context.Context, exec boil.ContextExecutor) (VendorRefundAndCancellationPolicyValueSlice, error) {
	var o []*VendorRefundAndCancellationPolicyValue

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VendorRefundAndCancellationPolicyValue slice")
	}

	if len(vendorRefundAndCancellationPolicyValueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VendorRefundAndCancellationPolicyValue records in the query.
func (q vendorRefundAndCancellationPolicyValueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count VendorRefundAndCancellationPolicyValue rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vendorRefundAndCancellationPolicyValueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if VendorRefundAndCancellationPolicyValue exists")
	}

	return count > 0, nil
}

// VendorRefundAndCancellationPolicy pointed to by the foreign key.
func (o *VendorRefundAndCancellationPolicyValue) VendorRefundAndCancellationPolicy(mods ...qm.QueryMod) vendorRefundAndCancellationPolicyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VendorRefundAndCancellationPolicyID),
	}

	queryMods = append(queryMods, mods...)

	return VendorRefundAndCancellationPolicies(queryMods...)
}

// LoadVendorRefundAndCancellationPolicy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vendorRefundAndCancellationPolicyValueL) LoadVendorRefundAndCancellationPolicy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendorRefundAndCancellationPolicyValue interface{}, mods queries.Applicator) error {
	var slice []*VendorRefundAndCancellationPolicyValue
	var object *VendorRefundAndCancellationPolicyValue

	if singular {
		var ok bool
		object, ok = maybeVendorRefundAndCancellationPolicyValue.(*VendorRefundAndCancellationPolicyValue)
		if !ok {
			object = new(VendorRefundAndCancellationPolicyValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendorRefundAndCancellationPolicyValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendorRefundAndCancellationPolicyValue))
			}
		}
	} else {
		s, ok := maybeVendorRefundAndCancellationPolicyValue.(*[]*VendorRefundAndCancellationPolicyValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendorRefundAndCancellationPolicyValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendorRefundAndCancellationPolicyValue))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorRefundAndCancellationPolicyValueR{}
		}
		args[object.VendorRefundAndCancellationPolicyID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorRefundAndCancellationPolicyValueR{}
			}

			args[obj.VendorRefundAndCancellationPolicyID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`VendorRefundAndCancellationPolicy`),
		qm.WhereIn(`VendorRefundAndCancellationPolicy.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VendorRefundAndCancellationPolicy")
	}

	var resultSlice []*VendorRefundAndCancellationPolicy
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VendorRefundAndCancellationPolicy")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for VendorRefundAndCancellationPolicy")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for VendorRefundAndCancellationPolicy")
	}

	if len(vendorRefundAndCancellationPolicyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VendorRefundAndCancellationPolicy = foreign
		if foreign.R == nil {
			foreign.R = &vendorRefundAndCancellationPolicyR{}
		}
		foreign.R.VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues = append(foreign.R.VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VendorRefundAndCancellationPolicyID == foreign.ID {
				local.R.VendorRefundAndCancellationPolicy = foreign
				if foreign.R == nil {
					foreign.R = &vendorRefundAndCancellationPolicyR{}
				}
				foreign.R.VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues = append(foreign.R.VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues, local)
				break
			}
		}
	}

	return nil
}

// SetVendorRefundAndCancellationPolicy of the vendorRefundAndCancellationPolicyValue to the related item.
// Sets o.R.VendorRefundAndCancellationPolicy to related.
// Adds o to related.R.VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues.
func (o *VendorRefundAndCancellationPolicyValue) SetVendorRefundAndCancellationPolicy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VendorRefundAndCancellationPolicy) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"VendorRefundAndCancellationPolicyValue\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_refund_and_cancellation_policy_id"}),
		strmangle.WhereClause("\"", "\"", 2, vendorRefundAndCancellationPolicyValuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VendorRefundAndCancellationPolicyID = related.ID
	if o.R == nil {
		o.R = &vendorRefundAndCancellationPolicyValueR{
			VendorRefundAndCancellationPolicy: related,
		}
	} else {
		o.R.VendorRefundAndCancellationPolicy = related
	}

	if related.R == nil {
		related.R = &vendorRefundAndCancellationPolicyR{
			VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues: VendorRefundAndCancellationPolicyValueSlice{o},
		}
	} else {
		related.R.VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues = append(related.R.VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues, o)
	}

	return nil
}

// VendorRefundAndCancellationPolicyValues retrieves all the records using an executor.
func VendorRefundAndCancellationPolicyValues(mods ...qm.QueryMod) vendorRefundAndCancellationPolicyValueQuery {
	mods = append(mods, qm.From("\"VendorRefundAndCancellationPolicyValue\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"VendorRefundAndCancellationPolicyValue\".*"})
	}

	return vendorRefundAndCancellationPolicyValueQuery{q}
}

// FindVendorRefundAndCancellationPolicyValue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVendorRefundAndCancellationPolicyValue(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*VendorRefundAndCancellationPolicyValue, error) {
	vendorRefundAndCancellationPolicyValueObj := &VendorRefundAndCancellationPolicyValue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"VendorRefundAndCancellationPolicyValue\" where \"ID\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, vendorRefundAndCancellationPolicyValueObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from VendorRefundAndCancellationPolicyValue")
	}

	if err = vendorRefundAndCancellationPolicyValueObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vendorRefundAndCancellationPolicyValueObj, err
	}

	return vendorRefundAndCancellationPolicyValueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VendorRefundAndCancellationPolicyValue) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no VendorRefundAndCancellationPolicyValue provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorRefundAndCancellationPolicyValueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vendorRefundAndCancellationPolicyValueInsertCacheMut.RLock()
	cache, cached := vendorRefundAndCancellationPolicyValueInsertCache[key]
	vendorRefundAndCancellationPolicyValueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vendorRefundAndCancellationPolicyValueAllColumns,
			vendorRefundAndCancellationPolicyValueColumnsWithDefault,
			vendorRefundAndCancellationPolicyValueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vendorRefundAndCancellationPolicyValueType, vendorRefundAndCancellationPolicyValueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vendorRefundAndCancellationPolicyValueType, vendorRefundAndCancellationPolicyValueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"VendorRefundAndCancellationPolicyValue\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"VendorRefundAndCancellationPolicyValue\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into VendorRefundAndCancellationPolicyValue")
	}

	if !cached {
		vendorRefundAndCancellationPolicyValueInsertCacheMut.Lock()
		vendorRefundAndCancellationPolicyValueInsertCache[key] = cache
		vendorRefundAndCancellationPolicyValueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VendorRefundAndCancellationPolicyValue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VendorRefundAndCancellationPolicyValue) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vendorRefundAndCancellationPolicyValueUpdateCacheMut.RLock()
	cache, cached := vendorRefundAndCancellationPolicyValueUpdateCache[key]
	vendorRefundAndCancellationPolicyValueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vendorRefundAndCancellationPolicyValueAllColumns,
			vendorRefundAndCancellationPolicyValuePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update VendorRefundAndCancellationPolicyValue, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"VendorRefundAndCancellationPolicyValue\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vendorRefundAndCancellationPolicyValuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vendorRefundAndCancellationPolicyValueType, vendorRefundAndCancellationPolicyValueMapping, append(wl, vendorRefundAndCancellationPolicyValuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update VendorRefundAndCancellationPolicyValue row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for VendorRefundAndCancellationPolicyValue")
	}

	if !cached {
		vendorRefundAndCancellationPolicyValueUpdateCacheMut.Lock()
		vendorRefundAndCancellationPolicyValueUpdateCache[key] = cache
		vendorRefundAndCancellationPolicyValueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vendorRefundAndCancellationPolicyValueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for VendorRefundAndCancellationPolicyValue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for VendorRefundAndCancellationPolicyValue")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VendorRefundAndCancellationPolicyValueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorRefundAndCancellationPolicyValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"VendorRefundAndCancellationPolicyValue\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vendorRefundAndCancellationPolicyValuePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vendorRefundAndCancellationPolicyValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vendorRefundAndCancellationPolicyValue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VendorRefundAndCancellationPolicyValue) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no VendorRefundAndCancellationPolicyValue provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorRefundAndCancellationPolicyValueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vendorRefundAndCancellationPolicyValueUpsertCacheMut.RLock()
	cache, cached := vendorRefundAndCancellationPolicyValueUpsertCache[key]
	vendorRefundAndCancellationPolicyValueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			vendorRefundAndCancellationPolicyValueAllColumns,
			vendorRefundAndCancellationPolicyValueColumnsWithDefault,
			vendorRefundAndCancellationPolicyValueColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vendorRefundAndCancellationPolicyValueAllColumns,
			vendorRefundAndCancellationPolicyValuePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert VendorRefundAndCancellationPolicyValue, could not build update column list")
		}

		ret := strmangle.SetComplement(vendorRefundAndCancellationPolicyValueAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(vendorRefundAndCancellationPolicyValuePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert VendorRefundAndCancellationPolicyValue, could not build conflict column list")
			}

			conflict = make([]string, len(vendorRefundAndCancellationPolicyValuePrimaryKeyColumns))
			copy(conflict, vendorRefundAndCancellationPolicyValuePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"VendorRefundAndCancellationPolicyValue\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(vendorRefundAndCancellationPolicyValueType, vendorRefundAndCancellationPolicyValueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vendorRefundAndCancellationPolicyValueType, vendorRefundAndCancellationPolicyValueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert VendorRefundAndCancellationPolicyValue")
	}

	if !cached {
		vendorRefundAndCancellationPolicyValueUpsertCacheMut.Lock()
		vendorRefundAndCancellationPolicyValueUpsertCache[key] = cache
		vendorRefundAndCancellationPolicyValueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VendorRefundAndCancellationPolicyValue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VendorRefundAndCancellationPolicyValue) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VendorRefundAndCancellationPolicyValue provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vendorRefundAndCancellationPolicyValuePrimaryKeyMapping)
	sql := "DELETE FROM \"VendorRefundAndCancellationPolicyValue\" WHERE \"ID\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from VendorRefundAndCancellationPolicyValue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for VendorRefundAndCancellationPolicyValue")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vendorRefundAndCancellationPolicyValueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vendorRefundAndCancellationPolicyValueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from VendorRefundAndCancellationPolicyValue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for VendorRefundAndCancellationPolicyValue")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VendorRefundAndCancellationPolicyValueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vendorRefundAndCancellationPolicyValueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorRefundAndCancellationPolicyValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"VendorRefundAndCancellationPolicyValue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorRefundAndCancellationPolicyValuePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vendorRefundAndCancellationPolicyValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for VendorRefundAndCancellationPolicyValue")
	}

	if len(vendorRefundAndCancellationPolicyValueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VendorRefundAndCancellationPolicyValue) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVendorRefundAndCancellationPolicyValue(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VendorRefundAndCancellationPolicyValueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VendorRefundAndCancellationPolicyValueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorRefundAndCancellationPolicyValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"VendorRefundAndCancellationPolicyValue\".* FROM \"VendorRefundAndCancellationPolicyValue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorRefundAndCancellationPolicyValuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VendorRefundAndCancellationPolicyValueSlice")
	}

	*o = slice

	return nil
}

// VendorRefundAndCancellationPolicyValueExists checks if the VendorRefundAndCancellationPolicyValue row exists.
func VendorRefundAndCancellationPolicyValueExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"VendorRefundAndCancellationPolicyValue\" where \"ID\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if VendorRefundAndCancellationPolicyValue exists")
	}

	return exists, nil
}

// Exists checks if the VendorRefundAndCancellationPolicyValue row exists.
func (o *VendorRefundAndCancellationPolicyValue) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VendorRefundAndCancellationPolicyValueExists(ctx, exec, o.ID)
}
