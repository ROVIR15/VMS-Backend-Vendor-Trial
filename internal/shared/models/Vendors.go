// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Vendor is an object representing the database table.
type Vendor struct {
	ID               int                  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name             null.String          `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Email            null.String          `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	Commission       null.Float64         `boil:"commission" json:"commission,omitempty" toml:"commission" yaml:"commission,omitempty"`
	VendorVisibility NullVendorVisibility `boil:"vendor_visibility" json:"vendor_visibility,omitempty" toml:"vendor_visibility" yaml:"vendor_visibility,omitempty"`
	Description      null.String          `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Logo             null.String          `boil:"logo" json:"logo,omitempty" toml:"logo" yaml:"logo,omitempty"`
	TrialEndDateAt   null.Time            `boil:"trial_end_date_at" json:"trial_end_date_at,omitempty" toml:"trial_end_date_at" yaml:"trial_end_date_at,omitempty"`
	CreatedAt        null.Time            `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt        null.Time            `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt        null.Time            `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *vendorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vendorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VendorColumns = struct {
	ID               string
	Name             string
	Email            string
	Commission       string
	VendorVisibility string
	Description      string
	Logo             string
	TrialEndDateAt   string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "id",
	Name:             "name",
	Email:            "email",
	Commission:       "commission",
	VendorVisibility: "vendor_visibility",
	Description:      "description",
	Logo:             "logo",
	TrialEndDateAt:   "trial_end_date_at",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
}

var VendorTableColumns = struct {
	ID               string
	Name             string
	Email            string
	Commission       string
	VendorVisibility string
	Description      string
	Logo             string
	TrialEndDateAt   string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "Vendors.id",
	Name:             "Vendors.name",
	Email:            "Vendors.email",
	Commission:       "Vendors.commission",
	VendorVisibility: "Vendors.vendor_visibility",
	Description:      "Vendors.description",
	Logo:             "Vendors.logo",
	TrialEndDateAt:   "Vendors.trial_end_date_at",
	CreatedAt:        "Vendors.created_at",
	UpdatedAt:        "Vendors.updated_at",
	DeletedAt:        "Vendors.deleted_at",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperNullVendorVisibility struct{ field string }

func (w whereHelperNullVendorVisibility) EQ(x NullVendorVisibility) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperNullVendorVisibility) NEQ(x NullVendorVisibility) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperNullVendorVisibility) LT(x NullVendorVisibility) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperNullVendorVisibility) LTE(x NullVendorVisibility) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperNullVendorVisibility) GT(x NullVendorVisibility) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperNullVendorVisibility) GTE(x NullVendorVisibility) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperNullVendorVisibility) IN(slice []NullVendorVisibility) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperNullVendorVisibility) NIN(slice []NullVendorVisibility) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperNullVendorVisibility) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperNullVendorVisibility) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var VendorWhere = struct {
	ID               whereHelperint
	Name             whereHelpernull_String
	Email            whereHelpernull_String
	Commission       whereHelpernull_Float64
	VendorVisibility whereHelperNullVendorVisibility
	Description      whereHelpernull_String
	Logo             whereHelpernull_String
	TrialEndDateAt   whereHelpernull_Time
	CreatedAt        whereHelpernull_Time
	UpdatedAt        whereHelpernull_Time
	DeletedAt        whereHelpernull_Time
}{
	ID:               whereHelperint{field: "\"Vendors\".\"id\""},
	Name:             whereHelpernull_String{field: "\"Vendors\".\"name\""},
	Email:            whereHelpernull_String{field: "\"Vendors\".\"email\""},
	Commission:       whereHelpernull_Float64{field: "\"Vendors\".\"commission\""},
	VendorVisibility: whereHelperNullVendorVisibility{field: "\"Vendors\".\"vendor_visibility\""},
	Description:      whereHelpernull_String{field: "\"Vendors\".\"description\""},
	Logo:             whereHelpernull_String{field: "\"Vendors\".\"logo\""},
	TrialEndDateAt:   whereHelpernull_Time{field: "\"Vendors\".\"trial_end_date_at\""},
	CreatedAt:        whereHelpernull_Time{field: "\"Vendors\".\"created_at\""},
	UpdatedAt:        whereHelpernull_Time{field: "\"Vendors\".\"updated_at\""},
	DeletedAt:        whereHelpernull_Time{field: "\"Vendors\".\"deleted_at\""},
}

// VendorRels is where relationship names are stored.
var VendorRels = struct {
	VendorVendorBookingPolicy               string
	VendorVendorDetail                      string
	VendorVendorPaymentPolicy               string
	VendorVendorRefundAndCancellationPolicy string
	VendorHosts                             string
	VendorVendorAddresses                   string
	VendorVendorLogs                        string
	VendorVendorPhones                      string
}{
	VendorVendorBookingPolicy:               "VendorVendorBookingPolicy",
	VendorVendorDetail:                      "VendorVendorDetail",
	VendorVendorPaymentPolicy:               "VendorVendorPaymentPolicy",
	VendorVendorRefundAndCancellationPolicy: "VendorVendorRefundAndCancellationPolicy",
	VendorHosts:                             "VendorHosts",
	VendorVendorAddresses:                   "VendorVendorAddresses",
	VendorVendorLogs:                        "VendorVendorLogs",
	VendorVendorPhones:                      "VendorVendorPhones",
}

// vendorR is where relationships are stored.
type vendorR struct {
	VendorVendorBookingPolicy               *VendorBookingPolicy               `boil:"VendorVendorBookingPolicy" json:"VendorVendorBookingPolicy" toml:"VendorVendorBookingPolicy" yaml:"VendorVendorBookingPolicy"`
	VendorVendorDetail                      *VendorDetail                      `boil:"VendorVendorDetail" json:"VendorVendorDetail" toml:"VendorVendorDetail" yaml:"VendorVendorDetail"`
	VendorVendorPaymentPolicy               *VendorPaymentPolicy               `boil:"VendorVendorPaymentPolicy" json:"VendorVendorPaymentPolicy" toml:"VendorVendorPaymentPolicy" yaml:"VendorVendorPaymentPolicy"`
	VendorVendorRefundAndCancellationPolicy *VendorRefundAndCancellationPolicy `boil:"VendorVendorRefundAndCancellationPolicy" json:"VendorVendorRefundAndCancellationPolicy" toml:"VendorVendorRefundAndCancellationPolicy" yaml:"VendorVendorRefundAndCancellationPolicy"`
	VendorHosts                             HostSlice                          `boil:"VendorHosts" json:"VendorHosts" toml:"VendorHosts" yaml:"VendorHosts"`
	VendorVendorAddresses                   VendorAddressSlice                 `boil:"VendorVendorAddresses" json:"VendorVendorAddresses" toml:"VendorVendorAddresses" yaml:"VendorVendorAddresses"`
	VendorVendorLogs                        VendorLogSlice                     `boil:"VendorVendorLogs" json:"VendorVendorLogs" toml:"VendorVendorLogs" yaml:"VendorVendorLogs"`
	VendorVendorPhones                      VendorPhoneSlice                   `boil:"VendorVendorPhones" json:"VendorVendorPhones" toml:"VendorVendorPhones" yaml:"VendorVendorPhones"`
}

// NewStruct creates a new relationship struct
func (*vendorR) NewStruct() *vendorR {
	return &vendorR{}
}

func (r *vendorR) GetVendorVendorBookingPolicy() *VendorBookingPolicy {
	if r == nil {
		return nil
	}
	return r.VendorVendorBookingPolicy
}

func (r *vendorR) GetVendorVendorDetail() *VendorDetail {
	if r == nil {
		return nil
	}
	return r.VendorVendorDetail
}

func (r *vendorR) GetVendorVendorPaymentPolicy() *VendorPaymentPolicy {
	if r == nil {
		return nil
	}
	return r.VendorVendorPaymentPolicy
}

func (r *vendorR) GetVendorVendorRefundAndCancellationPolicy() *VendorRefundAndCancellationPolicy {
	if r == nil {
		return nil
	}
	return r.VendorVendorRefundAndCancellationPolicy
}

func (r *vendorR) GetVendorHosts() HostSlice {
	if r == nil {
		return nil
	}
	return r.VendorHosts
}

func (r *vendorR) GetVendorVendorAddresses() VendorAddressSlice {
	if r == nil {
		return nil
	}
	return r.VendorVendorAddresses
}

func (r *vendorR) GetVendorVendorLogs() VendorLogSlice {
	if r == nil {
		return nil
	}
	return r.VendorVendorLogs
}

func (r *vendorR) GetVendorVendorPhones() VendorPhoneSlice {
	if r == nil {
		return nil
	}
	return r.VendorVendorPhones
}

// vendorL is where Load methods for each relationship are stored.
type vendorL struct{}

var (
	vendorAllColumns            = []string{"id", "name", "email", "commission", "vendor_visibility", "description", "logo", "trial_end_date_at", "created_at", "updated_at", "deleted_at"}
	vendorColumnsWithoutDefault = []string{}
	vendorColumnsWithDefault    = []string{"id", "name", "email", "commission", "vendor_visibility", "description", "logo", "trial_end_date_at", "created_at", "updated_at", "deleted_at"}
	vendorPrimaryKeyColumns     = []string{"id"}
	vendorGeneratedColumns      = []string{}
)

type (
	// VendorSlice is an alias for a slice of pointers to Vendor.
	// This should almost always be used instead of []Vendor.
	VendorSlice []*Vendor
	// VendorHook is the signature for custom Vendor hook methods
	VendorHook func(context.Context, boil.ContextExecutor, *Vendor) error

	vendorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vendorType                 = reflect.TypeOf(&Vendor{})
	vendorMapping              = queries.MakeStructMapping(vendorType)
	vendorPrimaryKeyMapping, _ = queries.BindMapping(vendorType, vendorMapping, vendorPrimaryKeyColumns)
	vendorInsertCacheMut       sync.RWMutex
	vendorInsertCache          = make(map[string]insertCache)
	vendorUpdateCacheMut       sync.RWMutex
	vendorUpdateCache          = make(map[string]updateCache)
	vendorUpsertCacheMut       sync.RWMutex
	vendorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vendorAfterSelectMu sync.Mutex
var vendorAfterSelectHooks []VendorHook

var vendorBeforeInsertMu sync.Mutex
var vendorBeforeInsertHooks []VendorHook
var vendorAfterInsertMu sync.Mutex
var vendorAfterInsertHooks []VendorHook

var vendorBeforeUpdateMu sync.Mutex
var vendorBeforeUpdateHooks []VendorHook
var vendorAfterUpdateMu sync.Mutex
var vendorAfterUpdateHooks []VendorHook

var vendorBeforeDeleteMu sync.Mutex
var vendorBeforeDeleteHooks []VendorHook
var vendorAfterDeleteMu sync.Mutex
var vendorAfterDeleteHooks []VendorHook

var vendorBeforeUpsertMu sync.Mutex
var vendorBeforeUpsertHooks []VendorHook
var vendorAfterUpsertMu sync.Mutex
var vendorAfterUpsertHooks []VendorHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Vendor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Vendor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Vendor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Vendor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Vendor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Vendor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Vendor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Vendor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Vendor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVendorHook registers your hook function for all future operations.
func AddVendorHook(hookPoint boil.HookPoint, vendorHook VendorHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vendorAfterSelectMu.Lock()
		vendorAfterSelectHooks = append(vendorAfterSelectHooks, vendorHook)
		vendorAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		vendorBeforeInsertMu.Lock()
		vendorBeforeInsertHooks = append(vendorBeforeInsertHooks, vendorHook)
		vendorBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		vendorAfterInsertMu.Lock()
		vendorAfterInsertHooks = append(vendorAfterInsertHooks, vendorHook)
		vendorAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		vendorBeforeUpdateMu.Lock()
		vendorBeforeUpdateHooks = append(vendorBeforeUpdateHooks, vendorHook)
		vendorBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		vendorAfterUpdateMu.Lock()
		vendorAfterUpdateHooks = append(vendorAfterUpdateHooks, vendorHook)
		vendorAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		vendorBeforeDeleteMu.Lock()
		vendorBeforeDeleteHooks = append(vendorBeforeDeleteHooks, vendorHook)
		vendorBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		vendorAfterDeleteMu.Lock()
		vendorAfterDeleteHooks = append(vendorAfterDeleteHooks, vendorHook)
		vendorAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		vendorBeforeUpsertMu.Lock()
		vendorBeforeUpsertHooks = append(vendorBeforeUpsertHooks, vendorHook)
		vendorBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		vendorAfterUpsertMu.Lock()
		vendorAfterUpsertHooks = append(vendorAfterUpsertHooks, vendorHook)
		vendorAfterUpsertMu.Unlock()
	}
}

// One returns a single vendor record from the query.
func (q vendorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Vendor, error) {
	o := &Vendor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Vendors")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Vendor records from the query.
func (q vendorQuery) All(ctx context.Context, exec boil.ContextExecutor) (VendorSlice, error) {
	var o []*Vendor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Vendor slice")
	}

	if len(vendorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Vendor records in the query.
func (q vendorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Vendors rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vendorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Vendors exists")
	}

	return count > 0, nil
}

// VendorVendorBookingPolicy pointed to by the foreign key.
func (o *Vendor) VendorVendorBookingPolicy(mods ...qm.QueryMod) vendorBookingPolicyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"vendor_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return VendorBookingPolicies(queryMods...)
}

// VendorVendorDetail pointed to by the foreign key.
func (o *Vendor) VendorVendorDetail(mods ...qm.QueryMod) vendorDetailQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"vendor_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return VendorDetails(queryMods...)
}

// VendorVendorPaymentPolicy pointed to by the foreign key.
func (o *Vendor) VendorVendorPaymentPolicy(mods ...qm.QueryMod) vendorPaymentPolicyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"vendor_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return VendorPaymentPolicies(queryMods...)
}

// VendorVendorRefundAndCancellationPolicy pointed to by the foreign key.
func (o *Vendor) VendorVendorRefundAndCancellationPolicy(mods ...qm.QueryMod) vendorRefundAndCancellationPolicyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"vendor_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return VendorRefundAndCancellationPolicies(queryMods...)
}

// VendorHosts retrieves all the Host's Hosts with an executor via vendor_id column.
func (o *Vendor) VendorHosts(mods ...qm.QueryMod) hostQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Host\".\"vendor_id\"=?", o.ID),
	)

	return Hosts(queryMods...)
}

// VendorVendorAddresses retrieves all the VendorAddress's VendorAddresses with an executor via vendor_id column.
func (o *Vendor) VendorVendorAddresses(mods ...qm.QueryMod) vendorAddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"VendorAddress\".\"vendor_id\"=?", o.ID),
	)

	return VendorAddresses(queryMods...)
}

// VendorVendorLogs retrieves all the VendorLog's VendorLogs with an executor via vendor_id column.
func (o *Vendor) VendorVendorLogs(mods ...qm.QueryMod) vendorLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"VendorLog\".\"vendor_id\"=?", o.ID),
	)

	return VendorLogs(queryMods...)
}

// VendorVendorPhones retrieves all the VendorPhone's VendorPhones with an executor via vendor_id column.
func (o *Vendor) VendorVendorPhones(mods ...qm.QueryMod) vendorPhoneQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"VendorPhone\".\"vendor_id\"=?", o.ID),
	)

	return VendorPhones(queryMods...)
}

// LoadVendorVendorBookingPolicy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (vendorL) LoadVendorVendorBookingPolicy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendor interface{}, mods queries.Applicator) error {
	var slice []*Vendor
	var object *Vendor

	if singular {
		var ok bool
		object, ok = maybeVendor.(*Vendor)
		if !ok {
			object = new(Vendor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendor))
			}
		}
	} else {
		s, ok := maybeVendor.(*[]*Vendor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`VendorBookingPolicy`),
		qm.WhereIn(`VendorBookingPolicy.vendor_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VendorBookingPolicy")
	}

	var resultSlice []*VendorBookingPolicy
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VendorBookingPolicy")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for VendorBookingPolicy")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for VendorBookingPolicy")
	}

	if len(vendorBookingPolicyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VendorVendorBookingPolicy = foreign
		if foreign.R == nil {
			foreign.R = &vendorBookingPolicyR{}
		}
		foreign.R.Vendor = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.VendorID) {
				local.R.VendorVendorBookingPolicy = foreign
				if foreign.R == nil {
					foreign.R = &vendorBookingPolicyR{}
				}
				foreign.R.Vendor = local
				break
			}
		}
	}

	return nil
}

// LoadVendorVendorDetail allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (vendorL) LoadVendorVendorDetail(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendor interface{}, mods queries.Applicator) error {
	var slice []*Vendor
	var object *Vendor

	if singular {
		var ok bool
		object, ok = maybeVendor.(*Vendor)
		if !ok {
			object = new(Vendor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendor))
			}
		}
	} else {
		s, ok := maybeVendor.(*[]*Vendor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`VendorDetail`),
		qm.WhereIn(`VendorDetail.vendor_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VendorDetail")
	}

	var resultSlice []*VendorDetail
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VendorDetail")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for VendorDetail")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for VendorDetail")
	}

	if len(vendorDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VendorVendorDetail = foreign
		if foreign.R == nil {
			foreign.R = &vendorDetailR{}
		}
		foreign.R.Vendor = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.VendorID {
				local.R.VendorVendorDetail = foreign
				if foreign.R == nil {
					foreign.R = &vendorDetailR{}
				}
				foreign.R.Vendor = local
				break
			}
		}
	}

	return nil
}

// LoadVendorVendorPaymentPolicy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (vendorL) LoadVendorVendorPaymentPolicy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendor interface{}, mods queries.Applicator) error {
	var slice []*Vendor
	var object *Vendor

	if singular {
		var ok bool
		object, ok = maybeVendor.(*Vendor)
		if !ok {
			object = new(Vendor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendor))
			}
		}
	} else {
		s, ok := maybeVendor.(*[]*Vendor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`VendorPaymentPolicy`),
		qm.WhereIn(`VendorPaymentPolicy.vendor_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VendorPaymentPolicy")
	}

	var resultSlice []*VendorPaymentPolicy
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VendorPaymentPolicy")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for VendorPaymentPolicy")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for VendorPaymentPolicy")
	}

	if len(vendorPaymentPolicyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VendorVendorPaymentPolicy = foreign
		if foreign.R == nil {
			foreign.R = &vendorPaymentPolicyR{}
		}
		foreign.R.Vendor = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.VendorID {
				local.R.VendorVendorPaymentPolicy = foreign
				if foreign.R == nil {
					foreign.R = &vendorPaymentPolicyR{}
				}
				foreign.R.Vendor = local
				break
			}
		}
	}

	return nil
}

// LoadVendorVendorRefundAndCancellationPolicy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (vendorL) LoadVendorVendorRefundAndCancellationPolicy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendor interface{}, mods queries.Applicator) error {
	var slice []*Vendor
	var object *Vendor

	if singular {
		var ok bool
		object, ok = maybeVendor.(*Vendor)
		if !ok {
			object = new(Vendor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendor))
			}
		}
	} else {
		s, ok := maybeVendor.(*[]*Vendor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`VendorRefundAndCancellationPolicy`),
		qm.WhereIn(`VendorRefundAndCancellationPolicy.vendor_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VendorRefundAndCancellationPolicy")
	}

	var resultSlice []*VendorRefundAndCancellationPolicy
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VendorRefundAndCancellationPolicy")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for VendorRefundAndCancellationPolicy")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for VendorRefundAndCancellationPolicy")
	}

	if len(vendorRefundAndCancellationPolicyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VendorVendorRefundAndCancellationPolicy = foreign
		if foreign.R == nil {
			foreign.R = &vendorRefundAndCancellationPolicyR{}
		}
		foreign.R.Vendor = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.VendorID {
				local.R.VendorVendorRefundAndCancellationPolicy = foreign
				if foreign.R == nil {
					foreign.R = &vendorRefundAndCancellationPolicyR{}
				}
				foreign.R.Vendor = local
				break
			}
		}
	}

	return nil
}

// LoadVendorHosts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (vendorL) LoadVendorHosts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendor interface{}, mods queries.Applicator) error {
	var slice []*Vendor
	var object *Vendor

	if singular {
		var ok bool
		object, ok = maybeVendor.(*Vendor)
		if !ok {
			object = new(Vendor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendor))
			}
		}
	} else {
		s, ok := maybeVendor.(*[]*Vendor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`Host`),
		qm.WhereIn(`Host.vendor_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Host")
	}

	var resultSlice []*Host
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Host")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Host")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Host")
	}

	if len(hostAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VendorHosts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &hostR{}
			}
			foreign.R.Vendor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VendorID {
				local.R.VendorHosts = append(local.R.VendorHosts, foreign)
				if foreign.R == nil {
					foreign.R = &hostR{}
				}
				foreign.R.Vendor = local
				break
			}
		}
	}

	return nil
}

// LoadVendorVendorAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (vendorL) LoadVendorVendorAddresses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendor interface{}, mods queries.Applicator) error {
	var slice []*Vendor
	var object *Vendor

	if singular {
		var ok bool
		object, ok = maybeVendor.(*Vendor)
		if !ok {
			object = new(Vendor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendor))
			}
		}
	} else {
		s, ok := maybeVendor.(*[]*Vendor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`VendorAddress`),
		qm.WhereIn(`VendorAddress.vendor_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VendorAddress")
	}

	var resultSlice []*VendorAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VendorAddress")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on VendorAddress")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for VendorAddress")
	}

	if len(vendorAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VendorVendorAddresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &vendorAddressR{}
			}
			foreign.R.Vendor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.VendorID) {
				local.R.VendorVendorAddresses = append(local.R.VendorVendorAddresses, foreign)
				if foreign.R == nil {
					foreign.R = &vendorAddressR{}
				}
				foreign.R.Vendor = local
				break
			}
		}
	}

	return nil
}

// LoadVendorVendorLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (vendorL) LoadVendorVendorLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendor interface{}, mods queries.Applicator) error {
	var slice []*Vendor
	var object *Vendor

	if singular {
		var ok bool
		object, ok = maybeVendor.(*Vendor)
		if !ok {
			object = new(Vendor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendor))
			}
		}
	} else {
		s, ok := maybeVendor.(*[]*Vendor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`VendorLog`),
		qm.WhereIn(`VendorLog.vendor_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VendorLog")
	}

	var resultSlice []*VendorLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VendorLog")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on VendorLog")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for VendorLog")
	}

	if len(vendorLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VendorVendorLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &vendorLogR{}
			}
			foreign.R.Vendor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VendorID {
				local.R.VendorVendorLogs = append(local.R.VendorVendorLogs, foreign)
				if foreign.R == nil {
					foreign.R = &vendorLogR{}
				}
				foreign.R.Vendor = local
				break
			}
		}
	}

	return nil
}

// LoadVendorVendorPhones allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (vendorL) LoadVendorVendorPhones(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendor interface{}, mods queries.Applicator) error {
	var slice []*Vendor
	var object *Vendor

	if singular {
		var ok bool
		object, ok = maybeVendor.(*Vendor)
		if !ok {
			object = new(Vendor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendor))
			}
		}
	} else {
		s, ok := maybeVendor.(*[]*Vendor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`VendorPhone`),
		qm.WhereIn(`VendorPhone.vendor_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VendorPhone")
	}

	var resultSlice []*VendorPhone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VendorPhone")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on VendorPhone")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for VendorPhone")
	}

	if len(vendorPhoneAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VendorVendorPhones = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &vendorPhoneR{}
			}
			foreign.R.Vendor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.VendorID) {
				local.R.VendorVendorPhones = append(local.R.VendorVendorPhones, foreign)
				if foreign.R == nil {
					foreign.R = &vendorPhoneR{}
				}
				foreign.R.Vendor = local
				break
			}
		}
	}

	return nil
}

// SetVendorVendorBookingPolicy of the vendor to the related item.
// Sets o.R.VendorVendorBookingPolicy to related.
// Adds o to related.R.Vendor.
func (o *Vendor) SetVendorVendorBookingPolicy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VendorBookingPolicy) error {
	var err error

	if insert {
		queries.Assign(&related.VendorID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"VendorBookingPolicy\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_id"}),
			strmangle.WhereClause("\"", "\"", 2, vendorBookingPolicyPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.VendorID, o.ID)
	}

	if o.R == nil {
		o.R = &vendorR{
			VendorVendorBookingPolicy: related,
		}
	} else {
		o.R.VendorVendorBookingPolicy = related
	}

	if related.R == nil {
		related.R = &vendorBookingPolicyR{
			Vendor: o,
		}
	} else {
		related.R.Vendor = o
	}
	return nil
}

// RemoveVendorVendorBookingPolicy relationship.
// Sets o.R.VendorVendorBookingPolicy to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Vendor) RemoveVendorVendorBookingPolicy(ctx context.Context, exec boil.ContextExecutor, related *VendorBookingPolicy) error {
	var err error

	queries.SetScanner(&related.VendorID, nil)
	if _, err = related.Update(ctx, exec, boil.Whitelist("vendor_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.VendorVendorBookingPolicy = nil
	}

	if related == nil || related.R == nil {
		return nil
	}

	related.R.Vendor = nil

	return nil
}

// SetVendorVendorDetail of the vendor to the related item.
// Sets o.R.VendorVendorDetail to related.
// Adds o to related.R.Vendor.
func (o *Vendor) SetVendorVendorDetail(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VendorDetail) error {
	var err error

	if insert {
		related.VendorID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"VendorDetail\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_id"}),
			strmangle.WhereClause("\"", "\"", 2, vendorDetailPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.VendorID = o.ID
	}

	if o.R == nil {
		o.R = &vendorR{
			VendorVendorDetail: related,
		}
	} else {
		o.R.VendorVendorDetail = related
	}

	if related.R == nil {
		related.R = &vendorDetailR{
			Vendor: o,
		}
	} else {
		related.R.Vendor = o
	}
	return nil
}

// SetVendorVendorPaymentPolicy of the vendor to the related item.
// Sets o.R.VendorVendorPaymentPolicy to related.
// Adds o to related.R.Vendor.
func (o *Vendor) SetVendorVendorPaymentPolicy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VendorPaymentPolicy) error {
	var err error

	if insert {
		related.VendorID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"VendorPaymentPolicy\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_id"}),
			strmangle.WhereClause("\"", "\"", 2, vendorPaymentPolicyPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.VendorID = o.ID
	}

	if o.R == nil {
		o.R = &vendorR{
			VendorVendorPaymentPolicy: related,
		}
	} else {
		o.R.VendorVendorPaymentPolicy = related
	}

	if related.R == nil {
		related.R = &vendorPaymentPolicyR{
			Vendor: o,
		}
	} else {
		related.R.Vendor = o
	}
	return nil
}

// SetVendorVendorRefundAndCancellationPolicy of the vendor to the related item.
// Sets o.R.VendorVendorRefundAndCancellationPolicy to related.
// Adds o to related.R.Vendor.
func (o *Vendor) SetVendorVendorRefundAndCancellationPolicy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VendorRefundAndCancellationPolicy) error {
	var err error

	if insert {
		related.VendorID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"VendorRefundAndCancellationPolicy\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_id"}),
			strmangle.WhereClause("\"", "\"", 2, vendorRefundAndCancellationPolicyPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.VendorID = o.ID
	}

	if o.R == nil {
		o.R = &vendorR{
			VendorVendorRefundAndCancellationPolicy: related,
		}
	} else {
		o.R.VendorVendorRefundAndCancellationPolicy = related
	}

	if related.R == nil {
		related.R = &vendorRefundAndCancellationPolicyR{
			Vendor: o,
		}
	} else {
		related.R.Vendor = o
	}
	return nil
}

// AddVendorHosts adds the given related objects to the existing relationships
// of the Vendor, optionally inserting them as new records.
// Appends related to o.R.VendorHosts.
// Sets related.R.Vendor appropriately.
func (o *Vendor) AddVendorHosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Host) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VendorID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Host\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_id"}),
				strmangle.WhereClause("\"", "\"", 2, hostPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VendorID = o.ID
		}
	}

	if o.R == nil {
		o.R = &vendorR{
			VendorHosts: related,
		}
	} else {
		o.R.VendorHosts = append(o.R.VendorHosts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &hostR{
				Vendor: o,
			}
		} else {
			rel.R.Vendor = o
		}
	}
	return nil
}

// AddVendorVendorAddresses adds the given related objects to the existing relationships
// of the Vendor, optionally inserting them as new records.
// Appends related to o.R.VendorVendorAddresses.
// Sets related.R.Vendor appropriately.
func (o *Vendor) AddVendorVendorAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VendorAddress) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.VendorID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"VendorAddress\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_id"}),
				strmangle.WhereClause("\"", "\"", 2, vendorAddressPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.VendorID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &vendorR{
			VendorVendorAddresses: related,
		}
	} else {
		o.R.VendorVendorAddresses = append(o.R.VendorVendorAddresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &vendorAddressR{
				Vendor: o,
			}
		} else {
			rel.R.Vendor = o
		}
	}
	return nil
}

// SetVendorVendorAddresses removes all previously related items of the
// Vendor replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Vendor's VendorVendorAddresses accordingly.
// Replaces o.R.VendorVendorAddresses with related.
// Sets related.R.Vendor's VendorVendorAddresses accordingly.
func (o *Vendor) SetVendorVendorAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VendorAddress) error {
	query := "update \"VendorAddress\" set \"vendor_id\" = null where \"vendor_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VendorVendorAddresses {
			queries.SetScanner(&rel.VendorID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Vendor = nil
		}
		o.R.VendorVendorAddresses = nil
	}

	return o.AddVendorVendorAddresses(ctx, exec, insert, related...)
}

// RemoveVendorVendorAddresses relationships from objects passed in.
// Removes related items from R.VendorVendorAddresses (uses pointer comparison, removal does not keep order)
// Sets related.R.Vendor.
func (o *Vendor) RemoveVendorVendorAddresses(ctx context.Context, exec boil.ContextExecutor, related ...*VendorAddress) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.VendorID, nil)
		if rel.R != nil {
			rel.R.Vendor = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("vendor_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VendorVendorAddresses {
			if rel != ri {
				continue
			}

			ln := len(o.R.VendorVendorAddresses)
			if ln > 1 && i < ln-1 {
				o.R.VendorVendorAddresses[i] = o.R.VendorVendorAddresses[ln-1]
			}
			o.R.VendorVendorAddresses = o.R.VendorVendorAddresses[:ln-1]
			break
		}
	}

	return nil
}

// AddVendorVendorLogs adds the given related objects to the existing relationships
// of the Vendor, optionally inserting them as new records.
// Appends related to o.R.VendorVendorLogs.
// Sets related.R.Vendor appropriately.
func (o *Vendor) AddVendorVendorLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VendorLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VendorID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"VendorLog\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_id"}),
				strmangle.WhereClause("\"", "\"", 2, vendorLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VendorID = o.ID
		}
	}

	if o.R == nil {
		o.R = &vendorR{
			VendorVendorLogs: related,
		}
	} else {
		o.R.VendorVendorLogs = append(o.R.VendorVendorLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &vendorLogR{
				Vendor: o,
			}
		} else {
			rel.R.Vendor = o
		}
	}
	return nil
}

// AddVendorVendorPhones adds the given related objects to the existing relationships
// of the Vendor, optionally inserting them as new records.
// Appends related to o.R.VendorVendorPhones.
// Sets related.R.Vendor appropriately.
func (o *Vendor) AddVendorVendorPhones(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VendorPhone) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.VendorID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"VendorPhone\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_id"}),
				strmangle.WhereClause("\"", "\"", 2, vendorPhonePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.VendorID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &vendorR{
			VendorVendorPhones: related,
		}
	} else {
		o.R.VendorVendorPhones = append(o.R.VendorVendorPhones, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &vendorPhoneR{
				Vendor: o,
			}
		} else {
			rel.R.Vendor = o
		}
	}
	return nil
}

// SetVendorVendorPhones removes all previously related items of the
// Vendor replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Vendor's VendorVendorPhones accordingly.
// Replaces o.R.VendorVendorPhones with related.
// Sets related.R.Vendor's VendorVendorPhones accordingly.
func (o *Vendor) SetVendorVendorPhones(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VendorPhone) error {
	query := "update \"VendorPhone\" set \"vendor_id\" = null where \"vendor_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VendorVendorPhones {
			queries.SetScanner(&rel.VendorID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Vendor = nil
		}
		o.R.VendorVendorPhones = nil
	}

	return o.AddVendorVendorPhones(ctx, exec, insert, related...)
}

// RemoveVendorVendorPhones relationships from objects passed in.
// Removes related items from R.VendorVendorPhones (uses pointer comparison, removal does not keep order)
// Sets related.R.Vendor.
func (o *Vendor) RemoveVendorVendorPhones(ctx context.Context, exec boil.ContextExecutor, related ...*VendorPhone) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.VendorID, nil)
		if rel.R != nil {
			rel.R.Vendor = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("vendor_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VendorVendorPhones {
			if rel != ri {
				continue
			}

			ln := len(o.R.VendorVendorPhones)
			if ln > 1 && i < ln-1 {
				o.R.VendorVendorPhones[i] = o.R.VendorVendorPhones[ln-1]
			}
			o.R.VendorVendorPhones = o.R.VendorVendorPhones[:ln-1]
			break
		}
	}

	return nil
}

// Vendors retrieves all the records using an executor.
func Vendors(mods ...qm.QueryMod) vendorQuery {
	mods = append(mods, qm.From("\"Vendors\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"Vendors\".*"})
	}

	return vendorQuery{q}
}

// FindVendor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVendor(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Vendor, error) {
	vendorObj := &Vendor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Vendors\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, vendorObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Vendors")
	}

	if err = vendorObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vendorObj, err
	}

	return vendorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Vendor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Vendors provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vendorInsertCacheMut.RLock()
	cache, cached := vendorInsertCache[key]
	vendorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vendorAllColumns,
			vendorColumnsWithDefault,
			vendorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vendorType, vendorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vendorType, vendorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Vendors\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Vendors\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Vendors")
	}

	if !cached {
		vendorInsertCacheMut.Lock()
		vendorInsertCache[key] = cache
		vendorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Vendor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Vendor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vendorUpdateCacheMut.RLock()
	cache, cached := vendorUpdateCache[key]
	vendorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vendorAllColumns,
			vendorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Vendors, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Vendors\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vendorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vendorType, vendorMapping, append(wl, vendorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Vendors row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Vendors")
	}

	if !cached {
		vendorUpdateCacheMut.Lock()
		vendorUpdateCache[key] = cache
		vendorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vendorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Vendors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Vendors")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VendorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Vendors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vendorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vendor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vendor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Vendor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no Vendors provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vendorUpsertCacheMut.RLock()
	cache, cached := vendorUpsertCache[key]
	vendorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			vendorAllColumns,
			vendorColumnsWithDefault,
			vendorColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vendorAllColumns,
			vendorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert Vendors, could not build update column list")
		}

		ret := strmangle.SetComplement(vendorAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(vendorPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert Vendors, could not build conflict column list")
			}

			conflict = make([]string, len(vendorPrimaryKeyColumns))
			copy(conflict, vendorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"Vendors\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(vendorType, vendorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vendorType, vendorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert Vendors")
	}

	if !cached {
		vendorUpsertCacheMut.Lock()
		vendorUpsertCache[key] = cache
		vendorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Vendor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Vendor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Vendor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vendorPrimaryKeyMapping)
	sql := "DELETE FROM \"Vendors\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Vendors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Vendors")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vendorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vendorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Vendors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Vendors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VendorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vendorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Vendors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vendor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Vendors")
	}

	if len(vendorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Vendor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVendor(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VendorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VendorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Vendors\".* FROM \"Vendors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VendorSlice")
	}

	*o = slice

	return nil
}

// VendorExists checks if the Vendor row exists.
func VendorExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Vendors\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Vendors exists")
	}

	return exists, nil
}

// Exists checks if the Vendor row exists.
func (o *Vendor) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VendorExists(ctx, exec, o.ID)
}
