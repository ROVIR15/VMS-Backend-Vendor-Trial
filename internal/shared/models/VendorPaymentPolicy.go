// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VendorPaymentPolicy is an object representing the database table.
type VendorPaymentPolicy struct {
	ID                        int  `boil:"id" json:"id" toml:"id" yaml:"id"`
	VendorID                  int  `boil:"vendor_id" json:"vendor_id" toml:"vendor_id" yaml:"vendor_id"`
	IsCollectAfterFulfillment bool `boil:"is_collect_after_fulfillment" json:"is_collect_after_fulfillment" toml:"is_collect_after_fulfillment" yaml:"is_collect_after_fulfillment"`

	R *vendorPaymentPolicyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vendorPaymentPolicyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VendorPaymentPolicyColumns = struct {
	ID                        string
	VendorID                  string
	IsCollectAfterFulfillment string
}{
	ID:                        "id",
	VendorID:                  "vendor_id",
	IsCollectAfterFulfillment: "is_collect_after_fulfillment",
}

var VendorPaymentPolicyTableColumns = struct {
	ID                        string
	VendorID                  string
	IsCollectAfterFulfillment string
}{
	ID:                        "VendorPaymentPolicy.id",
	VendorID:                  "VendorPaymentPolicy.vendor_id",
	IsCollectAfterFulfillment: "VendorPaymentPolicy.is_collect_after_fulfillment",
}

// Generated where

var VendorPaymentPolicyWhere = struct {
	ID                        whereHelperint
	VendorID                  whereHelperint
	IsCollectAfterFulfillment whereHelperbool
}{
	ID:                        whereHelperint{field: "\"VendorPaymentPolicy\".\"id\""},
	VendorID:                  whereHelperint{field: "\"VendorPaymentPolicy\".\"vendor_id\""},
	IsCollectAfterFulfillment: whereHelperbool{field: "\"VendorPaymentPolicy\".\"is_collect_after_fulfillment\""},
}

// VendorPaymentPolicyRels is where relationship names are stored.
var VendorPaymentPolicyRels = struct {
	Vendor                                      string
	VendorPaymentPolicyVendorPaymentPolicyValue string
}{
	Vendor: "Vendor",
	VendorPaymentPolicyVendorPaymentPolicyValue: "VendorPaymentPolicyVendorPaymentPolicyValue",
}

// vendorPaymentPolicyR is where relationships are stored.
type vendorPaymentPolicyR struct {
	Vendor                                      *Vendor                   `boil:"Vendor" json:"Vendor" toml:"Vendor" yaml:"Vendor"`
	VendorPaymentPolicyVendorPaymentPolicyValue *VendorPaymentPolicyValue `boil:"VendorPaymentPolicyVendorPaymentPolicyValue" json:"VendorPaymentPolicyVendorPaymentPolicyValue" toml:"VendorPaymentPolicyVendorPaymentPolicyValue" yaml:"VendorPaymentPolicyVendorPaymentPolicyValue"`
}

// NewStruct creates a new relationship struct
func (*vendorPaymentPolicyR) NewStruct() *vendorPaymentPolicyR {
	return &vendorPaymentPolicyR{}
}

func (r *vendorPaymentPolicyR) GetVendor() *Vendor {
	if r == nil {
		return nil
	}
	return r.Vendor
}

func (r *vendorPaymentPolicyR) GetVendorPaymentPolicyVendorPaymentPolicyValue() *VendorPaymentPolicyValue {
	if r == nil {
		return nil
	}
	return r.VendorPaymentPolicyVendorPaymentPolicyValue
}

// vendorPaymentPolicyL is where Load methods for each relationship are stored.
type vendorPaymentPolicyL struct{}

var (
	vendorPaymentPolicyAllColumns            = []string{"id", "vendor_id", "is_collect_after_fulfillment"}
	vendorPaymentPolicyColumnsWithoutDefault = []string{"vendor_id"}
	vendorPaymentPolicyColumnsWithDefault    = []string{"id", "is_collect_after_fulfillment"}
	vendorPaymentPolicyPrimaryKeyColumns     = []string{"id"}
	vendorPaymentPolicyGeneratedColumns      = []string{}
)

type (
	// VendorPaymentPolicySlice is an alias for a slice of pointers to VendorPaymentPolicy.
	// This should almost always be used instead of []VendorPaymentPolicy.
	VendorPaymentPolicySlice []*VendorPaymentPolicy
	// VendorPaymentPolicyHook is the signature for custom VendorPaymentPolicy hook methods
	VendorPaymentPolicyHook func(context.Context, boil.ContextExecutor, *VendorPaymentPolicy) error

	vendorPaymentPolicyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vendorPaymentPolicyType                 = reflect.TypeOf(&VendorPaymentPolicy{})
	vendorPaymentPolicyMapping              = queries.MakeStructMapping(vendorPaymentPolicyType)
	vendorPaymentPolicyPrimaryKeyMapping, _ = queries.BindMapping(vendorPaymentPolicyType, vendorPaymentPolicyMapping, vendorPaymentPolicyPrimaryKeyColumns)
	vendorPaymentPolicyInsertCacheMut       sync.RWMutex
	vendorPaymentPolicyInsertCache          = make(map[string]insertCache)
	vendorPaymentPolicyUpdateCacheMut       sync.RWMutex
	vendorPaymentPolicyUpdateCache          = make(map[string]updateCache)
	vendorPaymentPolicyUpsertCacheMut       sync.RWMutex
	vendorPaymentPolicyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vendorPaymentPolicyAfterSelectMu sync.Mutex
var vendorPaymentPolicyAfterSelectHooks []VendorPaymentPolicyHook

var vendorPaymentPolicyBeforeInsertMu sync.Mutex
var vendorPaymentPolicyBeforeInsertHooks []VendorPaymentPolicyHook
var vendorPaymentPolicyAfterInsertMu sync.Mutex
var vendorPaymentPolicyAfterInsertHooks []VendorPaymentPolicyHook

var vendorPaymentPolicyBeforeUpdateMu sync.Mutex
var vendorPaymentPolicyBeforeUpdateHooks []VendorPaymentPolicyHook
var vendorPaymentPolicyAfterUpdateMu sync.Mutex
var vendorPaymentPolicyAfterUpdateHooks []VendorPaymentPolicyHook

var vendorPaymentPolicyBeforeDeleteMu sync.Mutex
var vendorPaymentPolicyBeforeDeleteHooks []VendorPaymentPolicyHook
var vendorPaymentPolicyAfterDeleteMu sync.Mutex
var vendorPaymentPolicyAfterDeleteHooks []VendorPaymentPolicyHook

var vendorPaymentPolicyBeforeUpsertMu sync.Mutex
var vendorPaymentPolicyBeforeUpsertHooks []VendorPaymentPolicyHook
var vendorPaymentPolicyAfterUpsertMu sync.Mutex
var vendorPaymentPolicyAfterUpsertHooks []VendorPaymentPolicyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VendorPaymentPolicy) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VendorPaymentPolicy) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VendorPaymentPolicy) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VendorPaymentPolicy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VendorPaymentPolicy) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VendorPaymentPolicy) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VendorPaymentPolicy) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VendorPaymentPolicy) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VendorPaymentPolicy) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVendorPaymentPolicyHook registers your hook function for all future operations.
func AddVendorPaymentPolicyHook(hookPoint boil.HookPoint, vendorPaymentPolicyHook VendorPaymentPolicyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vendorPaymentPolicyAfterSelectMu.Lock()
		vendorPaymentPolicyAfterSelectHooks = append(vendorPaymentPolicyAfterSelectHooks, vendorPaymentPolicyHook)
		vendorPaymentPolicyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		vendorPaymentPolicyBeforeInsertMu.Lock()
		vendorPaymentPolicyBeforeInsertHooks = append(vendorPaymentPolicyBeforeInsertHooks, vendorPaymentPolicyHook)
		vendorPaymentPolicyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		vendorPaymentPolicyAfterInsertMu.Lock()
		vendorPaymentPolicyAfterInsertHooks = append(vendorPaymentPolicyAfterInsertHooks, vendorPaymentPolicyHook)
		vendorPaymentPolicyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		vendorPaymentPolicyBeforeUpdateMu.Lock()
		vendorPaymentPolicyBeforeUpdateHooks = append(vendorPaymentPolicyBeforeUpdateHooks, vendorPaymentPolicyHook)
		vendorPaymentPolicyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		vendorPaymentPolicyAfterUpdateMu.Lock()
		vendorPaymentPolicyAfterUpdateHooks = append(vendorPaymentPolicyAfterUpdateHooks, vendorPaymentPolicyHook)
		vendorPaymentPolicyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		vendorPaymentPolicyBeforeDeleteMu.Lock()
		vendorPaymentPolicyBeforeDeleteHooks = append(vendorPaymentPolicyBeforeDeleteHooks, vendorPaymentPolicyHook)
		vendorPaymentPolicyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		vendorPaymentPolicyAfterDeleteMu.Lock()
		vendorPaymentPolicyAfterDeleteHooks = append(vendorPaymentPolicyAfterDeleteHooks, vendorPaymentPolicyHook)
		vendorPaymentPolicyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		vendorPaymentPolicyBeforeUpsertMu.Lock()
		vendorPaymentPolicyBeforeUpsertHooks = append(vendorPaymentPolicyBeforeUpsertHooks, vendorPaymentPolicyHook)
		vendorPaymentPolicyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		vendorPaymentPolicyAfterUpsertMu.Lock()
		vendorPaymentPolicyAfterUpsertHooks = append(vendorPaymentPolicyAfterUpsertHooks, vendorPaymentPolicyHook)
		vendorPaymentPolicyAfterUpsertMu.Unlock()
	}
}

// One returns a single vendorPaymentPolicy record from the query.
func (q vendorPaymentPolicyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VendorPaymentPolicy, error) {
	o := &VendorPaymentPolicy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for VendorPaymentPolicy")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VendorPaymentPolicy records from the query.
func (q vendorPaymentPolicyQuery) All(ctx context.Context, exec boil.ContextExecutor) (VendorPaymentPolicySlice, error) {
	var o []*VendorPaymentPolicy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VendorPaymentPolicy slice")
	}

	if len(vendorPaymentPolicyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VendorPaymentPolicy records in the query.
func (q vendorPaymentPolicyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count VendorPaymentPolicy rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vendorPaymentPolicyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if VendorPaymentPolicy exists")
	}

	return count > 0, nil
}

// Vendor pointed to by the foreign key.
func (o *VendorPaymentPolicy) Vendor(mods ...qm.QueryMod) vendorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VendorID),
	}

	queryMods = append(queryMods, mods...)

	return Vendors(queryMods...)
}

// VendorPaymentPolicyVendorPaymentPolicyValue pointed to by the foreign key.
func (o *VendorPaymentPolicy) VendorPaymentPolicyVendorPaymentPolicyValue(mods ...qm.QueryMod) vendorPaymentPolicyValueQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"vendor_payment_policy_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return VendorPaymentPolicyValues(queryMods...)
}

// LoadVendor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vendorPaymentPolicyL) LoadVendor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendorPaymentPolicy interface{}, mods queries.Applicator) error {
	var slice []*VendorPaymentPolicy
	var object *VendorPaymentPolicy

	if singular {
		var ok bool
		object, ok = maybeVendorPaymentPolicy.(*VendorPaymentPolicy)
		if !ok {
			object = new(VendorPaymentPolicy)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendorPaymentPolicy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendorPaymentPolicy))
			}
		}
	} else {
		s, ok := maybeVendorPaymentPolicy.(*[]*VendorPaymentPolicy)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendorPaymentPolicy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendorPaymentPolicy))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorPaymentPolicyR{}
		}
		args[object.VendorID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorPaymentPolicyR{}
			}

			args[obj.VendorID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`Vendors`),
		qm.WhereIn(`Vendors.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Vendor")
	}

	var resultSlice []*Vendor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Vendor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Vendors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Vendors")
	}

	if len(vendorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Vendor = foreign
		if foreign.R == nil {
			foreign.R = &vendorR{}
		}
		foreign.R.VendorVendorPaymentPolicy = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VendorID == foreign.ID {
				local.R.Vendor = foreign
				if foreign.R == nil {
					foreign.R = &vendorR{}
				}
				foreign.R.VendorVendorPaymentPolicy = local
				break
			}
		}
	}

	return nil
}

// LoadVendorPaymentPolicyVendorPaymentPolicyValue allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (vendorPaymentPolicyL) LoadVendorPaymentPolicyVendorPaymentPolicyValue(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendorPaymentPolicy interface{}, mods queries.Applicator) error {
	var slice []*VendorPaymentPolicy
	var object *VendorPaymentPolicy

	if singular {
		var ok bool
		object, ok = maybeVendorPaymentPolicy.(*VendorPaymentPolicy)
		if !ok {
			object = new(VendorPaymentPolicy)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendorPaymentPolicy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendorPaymentPolicy))
			}
		}
	} else {
		s, ok := maybeVendorPaymentPolicy.(*[]*VendorPaymentPolicy)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendorPaymentPolicy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendorPaymentPolicy))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorPaymentPolicyR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorPaymentPolicyR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`VendorPaymentPolicyValue`),
		qm.WhereIn(`VendorPaymentPolicyValue.vendor_payment_policy_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VendorPaymentPolicyValue")
	}

	var resultSlice []*VendorPaymentPolicyValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VendorPaymentPolicyValue")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for VendorPaymentPolicyValue")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for VendorPaymentPolicyValue")
	}

	if len(vendorPaymentPolicyValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VendorPaymentPolicyVendorPaymentPolicyValue = foreign
		if foreign.R == nil {
			foreign.R = &vendorPaymentPolicyValueR{}
		}
		foreign.R.VendorPaymentPolicy = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.VendorPaymentPolicyID {
				local.R.VendorPaymentPolicyVendorPaymentPolicyValue = foreign
				if foreign.R == nil {
					foreign.R = &vendorPaymentPolicyValueR{}
				}
				foreign.R.VendorPaymentPolicy = local
				break
			}
		}
	}

	return nil
}

// SetVendor of the vendorPaymentPolicy to the related item.
// Sets o.R.Vendor to related.
// Adds o to related.R.VendorVendorPaymentPolicy.
func (o *VendorPaymentPolicy) SetVendor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Vendor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"VendorPaymentPolicy\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_id"}),
		strmangle.WhereClause("\"", "\"", 2, vendorPaymentPolicyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VendorID = related.ID
	if o.R == nil {
		o.R = &vendorPaymentPolicyR{
			Vendor: related,
		}
	} else {
		o.R.Vendor = related
	}

	if related.R == nil {
		related.R = &vendorR{
			VendorVendorPaymentPolicy: o,
		}
	} else {
		related.R.VendorVendorPaymentPolicy = o
	}

	return nil
}

// SetVendorPaymentPolicyVendorPaymentPolicyValue of the vendorPaymentPolicy to the related item.
// Sets o.R.VendorPaymentPolicyVendorPaymentPolicyValue to related.
// Adds o to related.R.VendorPaymentPolicy.
func (o *VendorPaymentPolicy) SetVendorPaymentPolicyVendorPaymentPolicyValue(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VendorPaymentPolicyValue) error {
	var err error

	if insert {
		related.VendorPaymentPolicyID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"VendorPaymentPolicyValue\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_payment_policy_id"}),
			strmangle.WhereClause("\"", "\"", 2, vendorPaymentPolicyValuePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.VendorPaymentPolicyID = o.ID
	}

	if o.R == nil {
		o.R = &vendorPaymentPolicyR{
			VendorPaymentPolicyVendorPaymentPolicyValue: related,
		}
	} else {
		o.R.VendorPaymentPolicyVendorPaymentPolicyValue = related
	}

	if related.R == nil {
		related.R = &vendorPaymentPolicyValueR{
			VendorPaymentPolicy: o,
		}
	} else {
		related.R.VendorPaymentPolicy = o
	}
	return nil
}

// VendorPaymentPolicies retrieves all the records using an executor.
func VendorPaymentPolicies(mods ...qm.QueryMod) vendorPaymentPolicyQuery {
	mods = append(mods, qm.From("\"VendorPaymentPolicy\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"VendorPaymentPolicy\".*"})
	}

	return vendorPaymentPolicyQuery{q}
}

// FindVendorPaymentPolicy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVendorPaymentPolicy(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*VendorPaymentPolicy, error) {
	vendorPaymentPolicyObj := &VendorPaymentPolicy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"VendorPaymentPolicy\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, vendorPaymentPolicyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from VendorPaymentPolicy")
	}

	if err = vendorPaymentPolicyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vendorPaymentPolicyObj, err
	}

	return vendorPaymentPolicyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VendorPaymentPolicy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no VendorPaymentPolicy provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorPaymentPolicyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vendorPaymentPolicyInsertCacheMut.RLock()
	cache, cached := vendorPaymentPolicyInsertCache[key]
	vendorPaymentPolicyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vendorPaymentPolicyAllColumns,
			vendorPaymentPolicyColumnsWithDefault,
			vendorPaymentPolicyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vendorPaymentPolicyType, vendorPaymentPolicyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vendorPaymentPolicyType, vendorPaymentPolicyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"VendorPaymentPolicy\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"VendorPaymentPolicy\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into VendorPaymentPolicy")
	}

	if !cached {
		vendorPaymentPolicyInsertCacheMut.Lock()
		vendorPaymentPolicyInsertCache[key] = cache
		vendorPaymentPolicyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VendorPaymentPolicy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VendorPaymentPolicy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vendorPaymentPolicyUpdateCacheMut.RLock()
	cache, cached := vendorPaymentPolicyUpdateCache[key]
	vendorPaymentPolicyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vendorPaymentPolicyAllColumns,
			vendorPaymentPolicyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update VendorPaymentPolicy, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"VendorPaymentPolicy\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vendorPaymentPolicyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vendorPaymentPolicyType, vendorPaymentPolicyMapping, append(wl, vendorPaymentPolicyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update VendorPaymentPolicy row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for VendorPaymentPolicy")
	}

	if !cached {
		vendorPaymentPolicyUpdateCacheMut.Lock()
		vendorPaymentPolicyUpdateCache[key] = cache
		vendorPaymentPolicyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vendorPaymentPolicyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for VendorPaymentPolicy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for VendorPaymentPolicy")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VendorPaymentPolicySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPaymentPolicyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"VendorPaymentPolicy\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vendorPaymentPolicyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vendorPaymentPolicy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vendorPaymentPolicy")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VendorPaymentPolicy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no VendorPaymentPolicy provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorPaymentPolicyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vendorPaymentPolicyUpsertCacheMut.RLock()
	cache, cached := vendorPaymentPolicyUpsertCache[key]
	vendorPaymentPolicyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			vendorPaymentPolicyAllColumns,
			vendorPaymentPolicyColumnsWithDefault,
			vendorPaymentPolicyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vendorPaymentPolicyAllColumns,
			vendorPaymentPolicyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert VendorPaymentPolicy, could not build update column list")
		}

		ret := strmangle.SetComplement(vendorPaymentPolicyAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(vendorPaymentPolicyPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert VendorPaymentPolicy, could not build conflict column list")
			}

			conflict = make([]string, len(vendorPaymentPolicyPrimaryKeyColumns))
			copy(conflict, vendorPaymentPolicyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"VendorPaymentPolicy\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(vendorPaymentPolicyType, vendorPaymentPolicyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vendorPaymentPolicyType, vendorPaymentPolicyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert VendorPaymentPolicy")
	}

	if !cached {
		vendorPaymentPolicyUpsertCacheMut.Lock()
		vendorPaymentPolicyUpsertCache[key] = cache
		vendorPaymentPolicyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VendorPaymentPolicy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VendorPaymentPolicy) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VendorPaymentPolicy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vendorPaymentPolicyPrimaryKeyMapping)
	sql := "DELETE FROM \"VendorPaymentPolicy\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from VendorPaymentPolicy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for VendorPaymentPolicy")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vendorPaymentPolicyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vendorPaymentPolicyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from VendorPaymentPolicy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for VendorPaymentPolicy")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VendorPaymentPolicySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vendorPaymentPolicyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPaymentPolicyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"VendorPaymentPolicy\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorPaymentPolicyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vendorPaymentPolicy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for VendorPaymentPolicy")
	}

	if len(vendorPaymentPolicyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VendorPaymentPolicy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVendorPaymentPolicy(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VendorPaymentPolicySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VendorPaymentPolicySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPaymentPolicyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"VendorPaymentPolicy\".* FROM \"VendorPaymentPolicy\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorPaymentPolicyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VendorPaymentPolicySlice")
	}

	*o = slice

	return nil
}

// VendorPaymentPolicyExists checks if the VendorPaymentPolicy row exists.
func VendorPaymentPolicyExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"VendorPaymentPolicy\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if VendorPaymentPolicy exists")
	}

	return exists, nil
}

// Exists checks if the VendorPaymentPolicy row exists.
func (o *VendorPaymentPolicy) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VendorPaymentPolicyExists(ctx, exec, o.ID)
}
