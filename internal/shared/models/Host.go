// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Host is an object representing the database table.
type Host struct {
	ID                     int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	VendorID               int          `boil:"vendor_id" json:"vendor_id" toml:"vendor_id" yaml:"vendor_id"`
	Code                   null.String  `boil:"code" json:"code,omitempty" toml:"code" yaml:"code,omitempty"`
	Commission             null.Float32 `boil:"commission" json:"commission,omitempty" toml:"commission" yaml:"commission,omitempty"`
	IsCommissionIncludeTax bool         `boil:"is_commission_include_tax" json:"is_commission_include_tax" toml:"is_commission_include_tax" yaml:"is_commission_include_tax"`
	IsAllowBooking         bool         `boil:"is_allow_booking" json:"is_allow_booking" toml:"is_allow_booking" yaml:"is_allow_booking"`
	CreatedAt              null.Time    `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt              null.Time    `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt              null.Time    `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *hostR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L hostL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HostColumns = struct {
	ID                     string
	VendorID               string
	Code                   string
	Commission             string
	IsCommissionIncludeTax string
	IsAllowBooking         string
	CreatedAt              string
	UpdatedAt              string
	DeletedAt              string
}{
	ID:                     "id",
	VendorID:               "vendor_id",
	Code:                   "code",
	Commission:             "commission",
	IsCommissionIncludeTax: "is_commission_include_tax",
	IsAllowBooking:         "is_allow_booking",
	CreatedAt:              "created_at",
	UpdatedAt:              "updated_at",
	DeletedAt:              "deleted_at",
}

var HostTableColumns = struct {
	ID                     string
	VendorID               string
	Code                   string
	Commission             string
	IsCommissionIncludeTax string
	IsAllowBooking         string
	CreatedAt              string
	UpdatedAt              string
	DeletedAt              string
}{
	ID:                     "Host.id",
	VendorID:               "Host.vendor_id",
	Code:                   "Host.code",
	Commission:             "Host.commission",
	IsCommissionIncludeTax: "Host.is_commission_include_tax",
	IsAllowBooking:         "Host.is_allow_booking",
	CreatedAt:              "Host.created_at",
	UpdatedAt:              "Host.updated_at",
	DeletedAt:              "Host.deleted_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Float32 struct{ field string }

func (w whereHelpernull_Float32) EQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float32) NEQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float32) LT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float32) LTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float32) GT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float32) GTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var HostWhere = struct {
	ID                     whereHelperint
	VendorID               whereHelperint
	Code                   whereHelpernull_String
	Commission             whereHelpernull_Float32
	IsCommissionIncludeTax whereHelperbool
	IsAllowBooking         whereHelperbool
	CreatedAt              whereHelpernull_Time
	UpdatedAt              whereHelpernull_Time
	DeletedAt              whereHelpernull_Time
}{
	ID:                     whereHelperint{field: "\"Host\".\"id\""},
	VendorID:               whereHelperint{field: "\"Host\".\"vendor_id\""},
	Code:                   whereHelpernull_String{field: "\"Host\".\"code\""},
	Commission:             whereHelpernull_Float32{field: "\"Host\".\"commission\""},
	IsCommissionIncludeTax: whereHelperbool{field: "\"Host\".\"is_commission_include_tax\""},
	IsAllowBooking:         whereHelperbool{field: "\"Host\".\"is_allow_booking\""},
	CreatedAt:              whereHelpernull_Time{field: "\"Host\".\"created_at\""},
	UpdatedAt:              whereHelpernull_Time{field: "\"Host\".\"updated_at\""},
	DeletedAt:              whereHelpernull_Time{field: "\"Host\".\"deleted_at\""},
}

// HostRels is where relationship names are stored.
var HostRels = struct {
	Vendor                   string
	HostPartnerHostContracts string
}{
	Vendor:                   "Vendor",
	HostPartnerHostContracts: "HostPartnerHostContracts",
}

// hostR is where relationships are stored.
type hostR struct {
	Vendor                   *Vendor           `boil:"Vendor" json:"Vendor" toml:"Vendor" yaml:"Vendor"`
	HostPartnerHostContracts HostContractSlice `boil:"HostPartnerHostContracts" json:"HostPartnerHostContracts" toml:"HostPartnerHostContracts" yaml:"HostPartnerHostContracts"`
}

// NewStruct creates a new relationship struct
func (*hostR) NewStruct() *hostR {
	return &hostR{}
}

func (r *hostR) GetVendor() *Vendor {
	if r == nil {
		return nil
	}
	return r.Vendor
}

func (r *hostR) GetHostPartnerHostContracts() HostContractSlice {
	if r == nil {
		return nil
	}
	return r.HostPartnerHostContracts
}

// hostL is where Load methods for each relationship are stored.
type hostL struct{}

var (
	hostAllColumns            = []string{"id", "vendor_id", "code", "commission", "is_commission_include_tax", "is_allow_booking", "created_at", "updated_at", "deleted_at"}
	hostColumnsWithoutDefault = []string{"vendor_id"}
	hostColumnsWithDefault    = []string{"id", "code", "commission", "is_commission_include_tax", "is_allow_booking", "created_at", "updated_at", "deleted_at"}
	hostPrimaryKeyColumns     = []string{"id"}
	hostGeneratedColumns      = []string{}
)

type (
	// HostSlice is an alias for a slice of pointers to Host.
	// This should almost always be used instead of []Host.
	HostSlice []*Host
	// HostHook is the signature for custom Host hook methods
	HostHook func(context.Context, boil.ContextExecutor, *Host) error

	hostQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	hostType                 = reflect.TypeOf(&Host{})
	hostMapping              = queries.MakeStructMapping(hostType)
	hostPrimaryKeyMapping, _ = queries.BindMapping(hostType, hostMapping, hostPrimaryKeyColumns)
	hostInsertCacheMut       sync.RWMutex
	hostInsertCache          = make(map[string]insertCache)
	hostUpdateCacheMut       sync.RWMutex
	hostUpdateCache          = make(map[string]updateCache)
	hostUpsertCacheMut       sync.RWMutex
	hostUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var hostAfterSelectMu sync.Mutex
var hostAfterSelectHooks []HostHook

var hostBeforeInsertMu sync.Mutex
var hostBeforeInsertHooks []HostHook
var hostAfterInsertMu sync.Mutex
var hostAfterInsertHooks []HostHook

var hostBeforeUpdateMu sync.Mutex
var hostBeforeUpdateHooks []HostHook
var hostAfterUpdateMu sync.Mutex
var hostAfterUpdateHooks []HostHook

var hostBeforeDeleteMu sync.Mutex
var hostBeforeDeleteHooks []HostHook
var hostAfterDeleteMu sync.Mutex
var hostAfterDeleteHooks []HostHook

var hostBeforeUpsertMu sync.Mutex
var hostBeforeUpsertHooks []HostHook
var hostAfterUpsertMu sync.Mutex
var hostAfterUpsertHooks []HostHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Host) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Host) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Host) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Host) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Host) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Host) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Host) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Host) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Host) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hostAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHostHook registers your hook function for all future operations.
func AddHostHook(hookPoint boil.HookPoint, hostHook HostHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		hostAfterSelectMu.Lock()
		hostAfterSelectHooks = append(hostAfterSelectHooks, hostHook)
		hostAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		hostBeforeInsertMu.Lock()
		hostBeforeInsertHooks = append(hostBeforeInsertHooks, hostHook)
		hostBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		hostAfterInsertMu.Lock()
		hostAfterInsertHooks = append(hostAfterInsertHooks, hostHook)
		hostAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		hostBeforeUpdateMu.Lock()
		hostBeforeUpdateHooks = append(hostBeforeUpdateHooks, hostHook)
		hostBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		hostAfterUpdateMu.Lock()
		hostAfterUpdateHooks = append(hostAfterUpdateHooks, hostHook)
		hostAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		hostBeforeDeleteMu.Lock()
		hostBeforeDeleteHooks = append(hostBeforeDeleteHooks, hostHook)
		hostBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		hostAfterDeleteMu.Lock()
		hostAfterDeleteHooks = append(hostAfterDeleteHooks, hostHook)
		hostAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		hostBeforeUpsertMu.Lock()
		hostBeforeUpsertHooks = append(hostBeforeUpsertHooks, hostHook)
		hostBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		hostAfterUpsertMu.Lock()
		hostAfterUpsertHooks = append(hostAfterUpsertHooks, hostHook)
		hostAfterUpsertMu.Unlock()
	}
}

// One returns a single host record from the query.
func (q hostQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Host, error) {
	o := &Host{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Host")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Host records from the query.
func (q hostQuery) All(ctx context.Context, exec boil.ContextExecutor) (HostSlice, error) {
	var o []*Host

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Host slice")
	}

	if len(hostAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Host records in the query.
func (q hostQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Host rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q hostQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Host exists")
	}

	return count > 0, nil
}

// Vendor pointed to by the foreign key.
func (o *Host) Vendor(mods ...qm.QueryMod) vendorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VendorID),
	}

	queryMods = append(queryMods, mods...)

	return Vendors(queryMods...)
}

// HostPartnerHostContracts retrieves all the HostContract's HostContracts with an executor via host_partner_id column.
func (o *Host) HostPartnerHostContracts(mods ...qm.QueryMod) hostContractQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"HostContract\".\"host_partner_id\"=?", o.ID),
	)

	return HostContracts(queryMods...)
}

// LoadVendor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (hostL) LoadVendor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHost interface{}, mods queries.Applicator) error {
	var slice []*Host
	var object *Host

	if singular {
		var ok bool
		object, ok = maybeHost.(*Host)
		if !ok {
			object = new(Host)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHost)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHost))
			}
		}
	} else {
		s, ok := maybeHost.(*[]*Host)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHost)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHost))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &hostR{}
		}
		args[object.VendorID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hostR{}
			}

			args[obj.VendorID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`Vendors`),
		qm.WhereIn(`Vendors.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Vendor")
	}

	var resultSlice []*Vendor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Vendor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Vendors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Vendors")
	}

	if len(vendorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Vendor = foreign
		if foreign.R == nil {
			foreign.R = &vendorR{}
		}
		foreign.R.VendorHosts = append(foreign.R.VendorHosts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VendorID == foreign.ID {
				local.R.Vendor = foreign
				if foreign.R == nil {
					foreign.R = &vendorR{}
				}
				foreign.R.VendorHosts = append(foreign.R.VendorHosts, local)
				break
			}
		}
	}

	return nil
}

// LoadHostPartnerHostContracts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hostL) LoadHostPartnerHostContracts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHost interface{}, mods queries.Applicator) error {
	var slice []*Host
	var object *Host

	if singular {
		var ok bool
		object, ok = maybeHost.(*Host)
		if !ok {
			object = new(Host)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHost)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHost))
			}
		}
	} else {
		s, ok := maybeHost.(*[]*Host)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHost)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHost))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &hostR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hostR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`HostContract`),
		qm.WhereIn(`HostContract.host_partner_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load HostContract")
	}

	var resultSlice []*HostContract
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice HostContract")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on HostContract")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for HostContract")
	}

	if len(hostContractAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HostPartnerHostContracts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &hostContractR{}
			}
			foreign.R.HostPartner = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.HostPartnerID {
				local.R.HostPartnerHostContracts = append(local.R.HostPartnerHostContracts, foreign)
				if foreign.R == nil {
					foreign.R = &hostContractR{}
				}
				foreign.R.HostPartner = local
				break
			}
		}
	}

	return nil
}

// SetVendor of the host to the related item.
// Sets o.R.Vendor to related.
// Adds o to related.R.VendorHosts.
func (o *Host) SetVendor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Vendor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Host\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_id"}),
		strmangle.WhereClause("\"", "\"", 2, hostPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VendorID = related.ID
	if o.R == nil {
		o.R = &hostR{
			Vendor: related,
		}
	} else {
		o.R.Vendor = related
	}

	if related.R == nil {
		related.R = &vendorR{
			VendorHosts: HostSlice{o},
		}
	} else {
		related.R.VendorHosts = append(related.R.VendorHosts, o)
	}

	return nil
}

// AddHostPartnerHostContracts adds the given related objects to the existing relationships
// of the Host, optionally inserting them as new records.
// Appends related to o.R.HostPartnerHostContracts.
// Sets related.R.HostPartner appropriately.
func (o *Host) AddHostPartnerHostContracts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HostContract) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.HostPartnerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"HostContract\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"host_partner_id"}),
				strmangle.WhereClause("\"", "\"", 2, hostContractPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.HostPartnerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &hostR{
			HostPartnerHostContracts: related,
		}
	} else {
		o.R.HostPartnerHostContracts = append(o.R.HostPartnerHostContracts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &hostContractR{
				HostPartner: o,
			}
		} else {
			rel.R.HostPartner = o
		}
	}
	return nil
}

// Hosts retrieves all the records using an executor.
func Hosts(mods ...qm.QueryMod) hostQuery {
	mods = append(mods, qm.From("\"Host\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"Host\".*"})
	}

	return hostQuery{q}
}

// FindHost retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHost(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Host, error) {
	hostObj := &Host{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Host\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, hostObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Host")
	}

	if err = hostObj.doAfterSelectHooks(ctx, exec); err != nil {
		return hostObj, err
	}

	return hostObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Host) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Host provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hostColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	hostInsertCacheMut.RLock()
	cache, cached := hostInsertCache[key]
	hostInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			hostAllColumns,
			hostColumnsWithDefault,
			hostColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(hostType, hostMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(hostType, hostMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Host\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Host\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Host")
	}

	if !cached {
		hostInsertCacheMut.Lock()
		hostInsertCache[key] = cache
		hostInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Host.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Host) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	hostUpdateCacheMut.RLock()
	cache, cached := hostUpdateCache[key]
	hostUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			hostAllColumns,
			hostPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Host, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Host\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, hostPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(hostType, hostMapping, append(wl, hostPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Host row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Host")
	}

	if !cached {
		hostUpdateCacheMut.Lock()
		hostUpdateCache[key] = cache
		hostUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q hostQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Host")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Host")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HostSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Host\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, hostPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in host slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all host")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Host) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no Host provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hostColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	hostUpsertCacheMut.RLock()
	cache, cached := hostUpsertCache[key]
	hostUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			hostAllColumns,
			hostColumnsWithDefault,
			hostColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			hostAllColumns,
			hostPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert Host, could not build update column list")
		}

		ret := strmangle.SetComplement(hostAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(hostPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert Host, could not build conflict column list")
			}

			conflict = make([]string, len(hostPrimaryKeyColumns))
			copy(conflict, hostPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"Host\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(hostType, hostMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(hostType, hostMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert Host")
	}

	if !cached {
		hostUpsertCacheMut.Lock()
		hostUpsertCache[key] = cache
		hostUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Host record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Host) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Host provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), hostPrimaryKeyMapping)
	sql := "DELETE FROM \"Host\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Host")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Host")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q hostQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no hostQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Host")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Host")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HostSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(hostBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Host\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hostPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from host slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Host")
	}

	if len(hostAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Host) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHost(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HostSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HostSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Host\".* FROM \"Host\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hostPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HostSlice")
	}

	*o = slice

	return nil
}

// HostExists checks if the Host row exists.
func HostExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Host\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Host exists")
	}

	return exists, nil
}

// Exists checks if the Host row exists.
func (o *Host) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return HostExists(ctx, exec, o.ID)
}
