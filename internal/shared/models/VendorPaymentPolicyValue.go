// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VendorPaymentPolicyValue is an object representing the database table.
type VendorPaymentPolicyValue struct {
	ID                      int                     `boil:"id" json:"id" toml:"id" yaml:"id"`
	VendorPaymentPolicyID   int                     `boil:"vendor_payment_policy_id" json:"vendor_payment_policy_id" toml:"vendor_payment_policy_id" yaml:"vendor_payment_policy_id"`
	VendorPaymentPolicyCode VendorPaymentPolicyCode `boil:"vendor_payment_policy_code" json:"vendor_payment_policy_code" toml:"vendor_payment_policy_code" yaml:"vendor_payment_policy_code"`
	ChargePercentage        float32                 `boil:"charge_percentage" json:"charge_percentage" toml:"charge_percentage" yaml:"charge_percentage"`
	Days                    null.Int16              `boil:"days" json:"days,omitempty" toml:"days" yaml:"days,omitempty"`
	Hours                   null.Int16              `boil:"hours" json:"hours,omitempty" toml:"hours" yaml:"hours,omitempty"`
	Minutes                 null.Int16              `boil:"minutes" json:"minutes,omitempty" toml:"minutes" yaml:"minutes,omitempty"`

	R *vendorPaymentPolicyValueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vendorPaymentPolicyValueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VendorPaymentPolicyValueColumns = struct {
	ID                      string
	VendorPaymentPolicyID   string
	VendorPaymentPolicyCode string
	ChargePercentage        string
	Days                    string
	Hours                   string
	Minutes                 string
}{
	ID:                      "id",
	VendorPaymentPolicyID:   "vendor_payment_policy_id",
	VendorPaymentPolicyCode: "vendor_payment_policy_code",
	ChargePercentage:        "charge_percentage",
	Days:                    "days",
	Hours:                   "hours",
	Minutes:                 "minutes",
}

var VendorPaymentPolicyValueTableColumns = struct {
	ID                      string
	VendorPaymentPolicyID   string
	VendorPaymentPolicyCode string
	ChargePercentage        string
	Days                    string
	Hours                   string
	Minutes                 string
}{
	ID:                      "VendorPaymentPolicyValue.id",
	VendorPaymentPolicyID:   "VendorPaymentPolicyValue.vendor_payment_policy_id",
	VendorPaymentPolicyCode: "VendorPaymentPolicyValue.vendor_payment_policy_code",
	ChargePercentage:        "VendorPaymentPolicyValue.charge_percentage",
	Days:                    "VendorPaymentPolicyValue.days",
	Hours:                   "VendorPaymentPolicyValue.hours",
	Minutes:                 "VendorPaymentPolicyValue.minutes",
}

// Generated where

type whereHelperVendorPaymentPolicyCode struct{ field string }

func (w whereHelperVendorPaymentPolicyCode) EQ(x VendorPaymentPolicyCode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperVendorPaymentPolicyCode) NEQ(x VendorPaymentPolicyCode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperVendorPaymentPolicyCode) LT(x VendorPaymentPolicyCode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperVendorPaymentPolicyCode) LTE(x VendorPaymentPolicyCode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperVendorPaymentPolicyCode) GT(x VendorPaymentPolicyCode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperVendorPaymentPolicyCode) GTE(x VendorPaymentPolicyCode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperVendorPaymentPolicyCode) IN(slice []VendorPaymentPolicyCode) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperVendorPaymentPolicyCode) NIN(slice []VendorPaymentPolicyCode) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int16 struct{ field string }

func (w whereHelpernull_Int16) EQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int16) NEQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int16) LT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int16) LTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int16) GT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int16) GTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int16) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int16) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var VendorPaymentPolicyValueWhere = struct {
	ID                      whereHelperint
	VendorPaymentPolicyID   whereHelperint
	VendorPaymentPolicyCode whereHelperVendorPaymentPolicyCode
	ChargePercentage        whereHelperfloat32
	Days                    whereHelpernull_Int16
	Hours                   whereHelpernull_Int16
	Minutes                 whereHelpernull_Int16
}{
	ID:                      whereHelperint{field: "\"VendorPaymentPolicyValue\".\"id\""},
	VendorPaymentPolicyID:   whereHelperint{field: "\"VendorPaymentPolicyValue\".\"vendor_payment_policy_id\""},
	VendorPaymentPolicyCode: whereHelperVendorPaymentPolicyCode{field: "\"VendorPaymentPolicyValue\".\"vendor_payment_policy_code\""},
	ChargePercentage:        whereHelperfloat32{field: "\"VendorPaymentPolicyValue\".\"charge_percentage\""},
	Days:                    whereHelpernull_Int16{field: "\"VendorPaymentPolicyValue\".\"days\""},
	Hours:                   whereHelpernull_Int16{field: "\"VendorPaymentPolicyValue\".\"hours\""},
	Minutes:                 whereHelpernull_Int16{field: "\"VendorPaymentPolicyValue\".\"minutes\""},
}

// VendorPaymentPolicyValueRels is where relationship names are stored.
var VendorPaymentPolicyValueRels = struct {
	VendorPaymentPolicy string
}{
	VendorPaymentPolicy: "VendorPaymentPolicy",
}

// vendorPaymentPolicyValueR is where relationships are stored.
type vendorPaymentPolicyValueR struct {
	VendorPaymentPolicy *VendorPaymentPolicy `boil:"VendorPaymentPolicy" json:"VendorPaymentPolicy" toml:"VendorPaymentPolicy" yaml:"VendorPaymentPolicy"`
}

// NewStruct creates a new relationship struct
func (*vendorPaymentPolicyValueR) NewStruct() *vendorPaymentPolicyValueR {
	return &vendorPaymentPolicyValueR{}
}

func (r *vendorPaymentPolicyValueR) GetVendorPaymentPolicy() *VendorPaymentPolicy {
	if r == nil {
		return nil
	}
	return r.VendorPaymentPolicy
}

// vendorPaymentPolicyValueL is where Load methods for each relationship are stored.
type vendorPaymentPolicyValueL struct{}

var (
	vendorPaymentPolicyValueAllColumns            = []string{"id", "vendor_payment_policy_id", "vendor_payment_policy_code", "charge_percentage", "days", "hours", "minutes"}
	vendorPaymentPolicyValueColumnsWithoutDefault = []string{"vendor_payment_policy_id", "vendor_payment_policy_code"}
	vendorPaymentPolicyValueColumnsWithDefault    = []string{"id", "charge_percentage", "days", "hours", "minutes"}
	vendorPaymentPolicyValuePrimaryKeyColumns     = []string{"id"}
	vendorPaymentPolicyValueGeneratedColumns      = []string{}
)

type (
	// VendorPaymentPolicyValueSlice is an alias for a slice of pointers to VendorPaymentPolicyValue.
	// This should almost always be used instead of []VendorPaymentPolicyValue.
	VendorPaymentPolicyValueSlice []*VendorPaymentPolicyValue
	// VendorPaymentPolicyValueHook is the signature for custom VendorPaymentPolicyValue hook methods
	VendorPaymentPolicyValueHook func(context.Context, boil.ContextExecutor, *VendorPaymentPolicyValue) error

	vendorPaymentPolicyValueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vendorPaymentPolicyValueType                 = reflect.TypeOf(&VendorPaymentPolicyValue{})
	vendorPaymentPolicyValueMapping              = queries.MakeStructMapping(vendorPaymentPolicyValueType)
	vendorPaymentPolicyValuePrimaryKeyMapping, _ = queries.BindMapping(vendorPaymentPolicyValueType, vendorPaymentPolicyValueMapping, vendorPaymentPolicyValuePrimaryKeyColumns)
	vendorPaymentPolicyValueInsertCacheMut       sync.RWMutex
	vendorPaymentPolicyValueInsertCache          = make(map[string]insertCache)
	vendorPaymentPolicyValueUpdateCacheMut       sync.RWMutex
	vendorPaymentPolicyValueUpdateCache          = make(map[string]updateCache)
	vendorPaymentPolicyValueUpsertCacheMut       sync.RWMutex
	vendorPaymentPolicyValueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vendorPaymentPolicyValueAfterSelectMu sync.Mutex
var vendorPaymentPolicyValueAfterSelectHooks []VendorPaymentPolicyValueHook

var vendorPaymentPolicyValueBeforeInsertMu sync.Mutex
var vendorPaymentPolicyValueBeforeInsertHooks []VendorPaymentPolicyValueHook
var vendorPaymentPolicyValueAfterInsertMu sync.Mutex
var vendorPaymentPolicyValueAfterInsertHooks []VendorPaymentPolicyValueHook

var vendorPaymentPolicyValueBeforeUpdateMu sync.Mutex
var vendorPaymentPolicyValueBeforeUpdateHooks []VendorPaymentPolicyValueHook
var vendorPaymentPolicyValueAfterUpdateMu sync.Mutex
var vendorPaymentPolicyValueAfterUpdateHooks []VendorPaymentPolicyValueHook

var vendorPaymentPolicyValueBeforeDeleteMu sync.Mutex
var vendorPaymentPolicyValueBeforeDeleteHooks []VendorPaymentPolicyValueHook
var vendorPaymentPolicyValueAfterDeleteMu sync.Mutex
var vendorPaymentPolicyValueAfterDeleteHooks []VendorPaymentPolicyValueHook

var vendorPaymentPolicyValueBeforeUpsertMu sync.Mutex
var vendorPaymentPolicyValueBeforeUpsertHooks []VendorPaymentPolicyValueHook
var vendorPaymentPolicyValueAfterUpsertMu sync.Mutex
var vendorPaymentPolicyValueAfterUpsertHooks []VendorPaymentPolicyValueHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VendorPaymentPolicyValue) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyValueAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VendorPaymentPolicyValue) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyValueBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VendorPaymentPolicyValue) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyValueAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VendorPaymentPolicyValue) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyValueBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VendorPaymentPolicyValue) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyValueAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VendorPaymentPolicyValue) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyValueBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VendorPaymentPolicyValue) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyValueAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VendorPaymentPolicyValue) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyValueBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VendorPaymentPolicyValue) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPaymentPolicyValueAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVendorPaymentPolicyValueHook registers your hook function for all future operations.
func AddVendorPaymentPolicyValueHook(hookPoint boil.HookPoint, vendorPaymentPolicyValueHook VendorPaymentPolicyValueHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vendorPaymentPolicyValueAfterSelectMu.Lock()
		vendorPaymentPolicyValueAfterSelectHooks = append(vendorPaymentPolicyValueAfterSelectHooks, vendorPaymentPolicyValueHook)
		vendorPaymentPolicyValueAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		vendorPaymentPolicyValueBeforeInsertMu.Lock()
		vendorPaymentPolicyValueBeforeInsertHooks = append(vendorPaymentPolicyValueBeforeInsertHooks, vendorPaymentPolicyValueHook)
		vendorPaymentPolicyValueBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		vendorPaymentPolicyValueAfterInsertMu.Lock()
		vendorPaymentPolicyValueAfterInsertHooks = append(vendorPaymentPolicyValueAfterInsertHooks, vendorPaymentPolicyValueHook)
		vendorPaymentPolicyValueAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		vendorPaymentPolicyValueBeforeUpdateMu.Lock()
		vendorPaymentPolicyValueBeforeUpdateHooks = append(vendorPaymentPolicyValueBeforeUpdateHooks, vendorPaymentPolicyValueHook)
		vendorPaymentPolicyValueBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		vendorPaymentPolicyValueAfterUpdateMu.Lock()
		vendorPaymentPolicyValueAfterUpdateHooks = append(vendorPaymentPolicyValueAfterUpdateHooks, vendorPaymentPolicyValueHook)
		vendorPaymentPolicyValueAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		vendorPaymentPolicyValueBeforeDeleteMu.Lock()
		vendorPaymentPolicyValueBeforeDeleteHooks = append(vendorPaymentPolicyValueBeforeDeleteHooks, vendorPaymentPolicyValueHook)
		vendorPaymentPolicyValueBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		vendorPaymentPolicyValueAfterDeleteMu.Lock()
		vendorPaymentPolicyValueAfterDeleteHooks = append(vendorPaymentPolicyValueAfterDeleteHooks, vendorPaymentPolicyValueHook)
		vendorPaymentPolicyValueAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		vendorPaymentPolicyValueBeforeUpsertMu.Lock()
		vendorPaymentPolicyValueBeforeUpsertHooks = append(vendorPaymentPolicyValueBeforeUpsertHooks, vendorPaymentPolicyValueHook)
		vendorPaymentPolicyValueBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		vendorPaymentPolicyValueAfterUpsertMu.Lock()
		vendorPaymentPolicyValueAfterUpsertHooks = append(vendorPaymentPolicyValueAfterUpsertHooks, vendorPaymentPolicyValueHook)
		vendorPaymentPolicyValueAfterUpsertMu.Unlock()
	}
}

// One returns a single vendorPaymentPolicyValue record from the query.
func (q vendorPaymentPolicyValueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VendorPaymentPolicyValue, error) {
	o := &VendorPaymentPolicyValue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for VendorPaymentPolicyValue")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VendorPaymentPolicyValue records from the query.
func (q vendorPaymentPolicyValueQuery) All(ctx context.Context, exec boil.ContextExecutor) (VendorPaymentPolicyValueSlice, error) {
	var o []*VendorPaymentPolicyValue

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VendorPaymentPolicyValue slice")
	}

	if len(vendorPaymentPolicyValueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VendorPaymentPolicyValue records in the query.
func (q vendorPaymentPolicyValueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count VendorPaymentPolicyValue rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vendorPaymentPolicyValueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if VendorPaymentPolicyValue exists")
	}

	return count > 0, nil
}

// VendorPaymentPolicy pointed to by the foreign key.
func (o *VendorPaymentPolicyValue) VendorPaymentPolicy(mods ...qm.QueryMod) vendorPaymentPolicyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VendorPaymentPolicyID),
	}

	queryMods = append(queryMods, mods...)

	return VendorPaymentPolicies(queryMods...)
}

// LoadVendorPaymentPolicy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vendorPaymentPolicyValueL) LoadVendorPaymentPolicy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendorPaymentPolicyValue interface{}, mods queries.Applicator) error {
	var slice []*VendorPaymentPolicyValue
	var object *VendorPaymentPolicyValue

	if singular {
		var ok bool
		object, ok = maybeVendorPaymentPolicyValue.(*VendorPaymentPolicyValue)
		if !ok {
			object = new(VendorPaymentPolicyValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendorPaymentPolicyValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendorPaymentPolicyValue))
			}
		}
	} else {
		s, ok := maybeVendorPaymentPolicyValue.(*[]*VendorPaymentPolicyValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendorPaymentPolicyValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendorPaymentPolicyValue))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorPaymentPolicyValueR{}
		}
		args[object.VendorPaymentPolicyID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorPaymentPolicyValueR{}
			}

			args[obj.VendorPaymentPolicyID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`VendorPaymentPolicy`),
		qm.WhereIn(`VendorPaymentPolicy.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VendorPaymentPolicy")
	}

	var resultSlice []*VendorPaymentPolicy
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VendorPaymentPolicy")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for VendorPaymentPolicy")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for VendorPaymentPolicy")
	}

	if len(vendorPaymentPolicyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VendorPaymentPolicy = foreign
		if foreign.R == nil {
			foreign.R = &vendorPaymentPolicyR{}
		}
		foreign.R.VendorPaymentPolicyVendorPaymentPolicyValue = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VendorPaymentPolicyID == foreign.ID {
				local.R.VendorPaymentPolicy = foreign
				if foreign.R == nil {
					foreign.R = &vendorPaymentPolicyR{}
				}
				foreign.R.VendorPaymentPolicyVendorPaymentPolicyValue = local
				break
			}
		}
	}

	return nil
}

// SetVendorPaymentPolicy of the vendorPaymentPolicyValue to the related item.
// Sets o.R.VendorPaymentPolicy to related.
// Adds o to related.R.VendorPaymentPolicyVendorPaymentPolicyValue.
func (o *VendorPaymentPolicyValue) SetVendorPaymentPolicy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VendorPaymentPolicy) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"VendorPaymentPolicyValue\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_payment_policy_id"}),
		strmangle.WhereClause("\"", "\"", 2, vendorPaymentPolicyValuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VendorPaymentPolicyID = related.ID
	if o.R == nil {
		o.R = &vendorPaymentPolicyValueR{
			VendorPaymentPolicy: related,
		}
	} else {
		o.R.VendorPaymentPolicy = related
	}

	if related.R == nil {
		related.R = &vendorPaymentPolicyR{
			VendorPaymentPolicyVendorPaymentPolicyValue: o,
		}
	} else {
		related.R.VendorPaymentPolicyVendorPaymentPolicyValue = o
	}

	return nil
}

// VendorPaymentPolicyValues retrieves all the records using an executor.
func VendorPaymentPolicyValues(mods ...qm.QueryMod) vendorPaymentPolicyValueQuery {
	mods = append(mods, qm.From("\"VendorPaymentPolicyValue\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"VendorPaymentPolicyValue\".*"})
	}

	return vendorPaymentPolicyValueQuery{q}
}

// FindVendorPaymentPolicyValue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVendorPaymentPolicyValue(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*VendorPaymentPolicyValue, error) {
	vendorPaymentPolicyValueObj := &VendorPaymentPolicyValue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"VendorPaymentPolicyValue\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, vendorPaymentPolicyValueObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from VendorPaymentPolicyValue")
	}

	if err = vendorPaymentPolicyValueObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vendorPaymentPolicyValueObj, err
	}

	return vendorPaymentPolicyValueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VendorPaymentPolicyValue) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no VendorPaymentPolicyValue provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorPaymentPolicyValueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vendorPaymentPolicyValueInsertCacheMut.RLock()
	cache, cached := vendorPaymentPolicyValueInsertCache[key]
	vendorPaymentPolicyValueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vendorPaymentPolicyValueAllColumns,
			vendorPaymentPolicyValueColumnsWithDefault,
			vendorPaymentPolicyValueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vendorPaymentPolicyValueType, vendorPaymentPolicyValueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vendorPaymentPolicyValueType, vendorPaymentPolicyValueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"VendorPaymentPolicyValue\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"VendorPaymentPolicyValue\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into VendorPaymentPolicyValue")
	}

	if !cached {
		vendorPaymentPolicyValueInsertCacheMut.Lock()
		vendorPaymentPolicyValueInsertCache[key] = cache
		vendorPaymentPolicyValueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VendorPaymentPolicyValue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VendorPaymentPolicyValue) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vendorPaymentPolicyValueUpdateCacheMut.RLock()
	cache, cached := vendorPaymentPolicyValueUpdateCache[key]
	vendorPaymentPolicyValueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vendorPaymentPolicyValueAllColumns,
			vendorPaymentPolicyValuePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update VendorPaymentPolicyValue, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"VendorPaymentPolicyValue\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vendorPaymentPolicyValuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vendorPaymentPolicyValueType, vendorPaymentPolicyValueMapping, append(wl, vendorPaymentPolicyValuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update VendorPaymentPolicyValue row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for VendorPaymentPolicyValue")
	}

	if !cached {
		vendorPaymentPolicyValueUpdateCacheMut.Lock()
		vendorPaymentPolicyValueUpdateCache[key] = cache
		vendorPaymentPolicyValueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vendorPaymentPolicyValueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for VendorPaymentPolicyValue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for VendorPaymentPolicyValue")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VendorPaymentPolicyValueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPaymentPolicyValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"VendorPaymentPolicyValue\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vendorPaymentPolicyValuePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vendorPaymentPolicyValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vendorPaymentPolicyValue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VendorPaymentPolicyValue) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no VendorPaymentPolicyValue provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorPaymentPolicyValueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vendorPaymentPolicyValueUpsertCacheMut.RLock()
	cache, cached := vendorPaymentPolicyValueUpsertCache[key]
	vendorPaymentPolicyValueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			vendorPaymentPolicyValueAllColumns,
			vendorPaymentPolicyValueColumnsWithDefault,
			vendorPaymentPolicyValueColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vendorPaymentPolicyValueAllColumns,
			vendorPaymentPolicyValuePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert VendorPaymentPolicyValue, could not build update column list")
		}

		ret := strmangle.SetComplement(vendorPaymentPolicyValueAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(vendorPaymentPolicyValuePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert VendorPaymentPolicyValue, could not build conflict column list")
			}

			conflict = make([]string, len(vendorPaymentPolicyValuePrimaryKeyColumns))
			copy(conflict, vendorPaymentPolicyValuePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"VendorPaymentPolicyValue\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(vendorPaymentPolicyValueType, vendorPaymentPolicyValueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vendorPaymentPolicyValueType, vendorPaymentPolicyValueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert VendorPaymentPolicyValue")
	}

	if !cached {
		vendorPaymentPolicyValueUpsertCacheMut.Lock()
		vendorPaymentPolicyValueUpsertCache[key] = cache
		vendorPaymentPolicyValueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VendorPaymentPolicyValue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VendorPaymentPolicyValue) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VendorPaymentPolicyValue provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vendorPaymentPolicyValuePrimaryKeyMapping)
	sql := "DELETE FROM \"VendorPaymentPolicyValue\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from VendorPaymentPolicyValue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for VendorPaymentPolicyValue")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vendorPaymentPolicyValueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vendorPaymentPolicyValueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from VendorPaymentPolicyValue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for VendorPaymentPolicyValue")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VendorPaymentPolicyValueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vendorPaymentPolicyValueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPaymentPolicyValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"VendorPaymentPolicyValue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorPaymentPolicyValuePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vendorPaymentPolicyValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for VendorPaymentPolicyValue")
	}

	if len(vendorPaymentPolicyValueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VendorPaymentPolicyValue) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVendorPaymentPolicyValue(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VendorPaymentPolicyValueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VendorPaymentPolicyValueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPaymentPolicyValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"VendorPaymentPolicyValue\".* FROM \"VendorPaymentPolicyValue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorPaymentPolicyValuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VendorPaymentPolicyValueSlice")
	}

	*o = slice

	return nil
}

// VendorPaymentPolicyValueExists checks if the VendorPaymentPolicyValue row exists.
func VendorPaymentPolicyValueExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"VendorPaymentPolicyValue\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if VendorPaymentPolicyValue exists")
	}

	return exists, nil
}

// Exists checks if the VendorPaymentPolicyValue row exists.
func (o *VendorPaymentPolicyValue) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VendorPaymentPolicyValueExists(ctx, exec, o.ID)
}
