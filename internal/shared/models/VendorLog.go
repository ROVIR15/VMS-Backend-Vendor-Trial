// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VendorLog is an object representing the database table.
type VendorLog struct {
	ID               int                  `boil:"id" json:"id" toml:"id" yaml:"id"`
	VendorID         int                  `boil:"vendor_id" json:"vendor_id" toml:"vendor_id" yaml:"vendor_id"`
	UserID           null.Int             `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	VendorLogSection NullVendorLogSection `boil:"vendor_log_section" json:"vendor_log_section,omitempty" toml:"vendor_log_section" yaml:"vendor_log_section,omitempty"`
	OldValue         null.JSON            `boil:"old_value" json:"old_value,omitempty" toml:"old_value" yaml:"old_value,omitempty"`
	NewValue         null.JSON            `boil:"new_value" json:"new_value,omitempty" toml:"new_value" yaml:"new_value,omitempty"`
	CreatedAt        time.Time            `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt        null.Time            `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *vendorLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vendorLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VendorLogColumns = struct {
	ID               string
	VendorID         string
	UserID           string
	VendorLogSection string
	OldValue         string
	NewValue         string
	CreatedAt        string
	DeletedAt        string
}{
	ID:               "id",
	VendorID:         "vendor_id",
	UserID:           "user_id",
	VendorLogSection: "vendor_log_section",
	OldValue:         "old_value",
	NewValue:         "new_value",
	CreatedAt:        "created_at",
	DeletedAt:        "deleted_at",
}

var VendorLogTableColumns = struct {
	ID               string
	VendorID         string
	UserID           string
	VendorLogSection string
	OldValue         string
	NewValue         string
	CreatedAt        string
	DeletedAt        string
}{
	ID:               "VendorLog.id",
	VendorID:         "VendorLog.vendor_id",
	UserID:           "VendorLog.user_id",
	VendorLogSection: "VendorLog.vendor_log_section",
	OldValue:         "VendorLog.old_value",
	NewValue:         "VendorLog.new_value",
	CreatedAt:        "VendorLog.created_at",
	DeletedAt:        "VendorLog.deleted_at",
}

// Generated where

type whereHelperNullVendorLogSection struct{ field string }

func (w whereHelperNullVendorLogSection) EQ(x NullVendorLogSection) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperNullVendorLogSection) NEQ(x NullVendorLogSection) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperNullVendorLogSection) LT(x NullVendorLogSection) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperNullVendorLogSection) LTE(x NullVendorLogSection) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperNullVendorLogSection) GT(x NullVendorLogSection) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperNullVendorLogSection) GTE(x NullVendorLogSection) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperNullVendorLogSection) IN(slice []NullVendorLogSection) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperNullVendorLogSection) NIN(slice []NullVendorLogSection) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperNullVendorLogSection) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperNullVendorLogSection) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var VendorLogWhere = struct {
	ID               whereHelperint
	VendorID         whereHelperint
	UserID           whereHelpernull_Int
	VendorLogSection whereHelperNullVendorLogSection
	OldValue         whereHelpernull_JSON
	NewValue         whereHelpernull_JSON
	CreatedAt        whereHelpertime_Time
	DeletedAt        whereHelpernull_Time
}{
	ID:               whereHelperint{field: "\"VendorLog\".\"id\""},
	VendorID:         whereHelperint{field: "\"VendorLog\".\"vendor_id\""},
	UserID:           whereHelpernull_Int{field: "\"VendorLog\".\"user_id\""},
	VendorLogSection: whereHelperNullVendorLogSection{field: "\"VendorLog\".\"vendor_log_section\""},
	OldValue:         whereHelpernull_JSON{field: "\"VendorLog\".\"old_value\""},
	NewValue:         whereHelpernull_JSON{field: "\"VendorLog\".\"new_value\""},
	CreatedAt:        whereHelpertime_Time{field: "\"VendorLog\".\"created_at\""},
	DeletedAt:        whereHelpernull_Time{field: "\"VendorLog\".\"deleted_at\""},
}

// VendorLogRels is where relationship names are stored.
var VendorLogRels = struct {
	Vendor string
}{
	Vendor: "Vendor",
}

// vendorLogR is where relationships are stored.
type vendorLogR struct {
	Vendor *Vendor `boil:"Vendor" json:"Vendor" toml:"Vendor" yaml:"Vendor"`
}

// NewStruct creates a new relationship struct
func (*vendorLogR) NewStruct() *vendorLogR {
	return &vendorLogR{}
}

func (r *vendorLogR) GetVendor() *Vendor {
	if r == nil {
		return nil
	}
	return r.Vendor
}

// vendorLogL is where Load methods for each relationship are stored.
type vendorLogL struct{}

var (
	vendorLogAllColumns            = []string{"id", "vendor_id", "user_id", "vendor_log_section", "old_value", "new_value", "created_at", "deleted_at"}
	vendorLogColumnsWithoutDefault = []string{"vendor_id"}
	vendorLogColumnsWithDefault    = []string{"id", "user_id", "vendor_log_section", "old_value", "new_value", "created_at", "deleted_at"}
	vendorLogPrimaryKeyColumns     = []string{"id"}
	vendorLogGeneratedColumns      = []string{}
)

type (
	// VendorLogSlice is an alias for a slice of pointers to VendorLog.
	// This should almost always be used instead of []VendorLog.
	VendorLogSlice []*VendorLog
	// VendorLogHook is the signature for custom VendorLog hook methods
	VendorLogHook func(context.Context, boil.ContextExecutor, *VendorLog) error

	vendorLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vendorLogType                 = reflect.TypeOf(&VendorLog{})
	vendorLogMapping              = queries.MakeStructMapping(vendorLogType)
	vendorLogPrimaryKeyMapping, _ = queries.BindMapping(vendorLogType, vendorLogMapping, vendorLogPrimaryKeyColumns)
	vendorLogInsertCacheMut       sync.RWMutex
	vendorLogInsertCache          = make(map[string]insertCache)
	vendorLogUpdateCacheMut       sync.RWMutex
	vendorLogUpdateCache          = make(map[string]updateCache)
	vendorLogUpsertCacheMut       sync.RWMutex
	vendorLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vendorLogAfterSelectMu sync.Mutex
var vendorLogAfterSelectHooks []VendorLogHook

var vendorLogBeforeInsertMu sync.Mutex
var vendorLogBeforeInsertHooks []VendorLogHook
var vendorLogAfterInsertMu sync.Mutex
var vendorLogAfterInsertHooks []VendorLogHook

var vendorLogBeforeUpdateMu sync.Mutex
var vendorLogBeforeUpdateHooks []VendorLogHook
var vendorLogAfterUpdateMu sync.Mutex
var vendorLogAfterUpdateHooks []VendorLogHook

var vendorLogBeforeDeleteMu sync.Mutex
var vendorLogBeforeDeleteHooks []VendorLogHook
var vendorLogAfterDeleteMu sync.Mutex
var vendorLogAfterDeleteHooks []VendorLogHook

var vendorLogBeforeUpsertMu sync.Mutex
var vendorLogBeforeUpsertHooks []VendorLogHook
var vendorLogAfterUpsertMu sync.Mutex
var vendorLogAfterUpsertHooks []VendorLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VendorLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VendorLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VendorLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VendorLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VendorLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VendorLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VendorLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VendorLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VendorLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVendorLogHook registers your hook function for all future operations.
func AddVendorLogHook(hookPoint boil.HookPoint, vendorLogHook VendorLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vendorLogAfterSelectMu.Lock()
		vendorLogAfterSelectHooks = append(vendorLogAfterSelectHooks, vendorLogHook)
		vendorLogAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		vendorLogBeforeInsertMu.Lock()
		vendorLogBeforeInsertHooks = append(vendorLogBeforeInsertHooks, vendorLogHook)
		vendorLogBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		vendorLogAfterInsertMu.Lock()
		vendorLogAfterInsertHooks = append(vendorLogAfterInsertHooks, vendorLogHook)
		vendorLogAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		vendorLogBeforeUpdateMu.Lock()
		vendorLogBeforeUpdateHooks = append(vendorLogBeforeUpdateHooks, vendorLogHook)
		vendorLogBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		vendorLogAfterUpdateMu.Lock()
		vendorLogAfterUpdateHooks = append(vendorLogAfterUpdateHooks, vendorLogHook)
		vendorLogAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		vendorLogBeforeDeleteMu.Lock()
		vendorLogBeforeDeleteHooks = append(vendorLogBeforeDeleteHooks, vendorLogHook)
		vendorLogBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		vendorLogAfterDeleteMu.Lock()
		vendorLogAfterDeleteHooks = append(vendorLogAfterDeleteHooks, vendorLogHook)
		vendorLogAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		vendorLogBeforeUpsertMu.Lock()
		vendorLogBeforeUpsertHooks = append(vendorLogBeforeUpsertHooks, vendorLogHook)
		vendorLogBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		vendorLogAfterUpsertMu.Lock()
		vendorLogAfterUpsertHooks = append(vendorLogAfterUpsertHooks, vendorLogHook)
		vendorLogAfterUpsertMu.Unlock()
	}
}

// One returns a single vendorLog record from the query.
func (q vendorLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VendorLog, error) {
	o := &VendorLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for VendorLog")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VendorLog records from the query.
func (q vendorLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (VendorLogSlice, error) {
	var o []*VendorLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VendorLog slice")
	}

	if len(vendorLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VendorLog records in the query.
func (q vendorLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count VendorLog rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vendorLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if VendorLog exists")
	}

	return count > 0, nil
}

// Vendor pointed to by the foreign key.
func (o *VendorLog) Vendor(mods ...qm.QueryMod) vendorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VendorID),
	}

	queryMods = append(queryMods, mods...)

	return Vendors(queryMods...)
}

// LoadVendor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vendorLogL) LoadVendor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendorLog interface{}, mods queries.Applicator) error {
	var slice []*VendorLog
	var object *VendorLog

	if singular {
		var ok bool
		object, ok = maybeVendorLog.(*VendorLog)
		if !ok {
			object = new(VendorLog)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendorLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendorLog))
			}
		}
	} else {
		s, ok := maybeVendorLog.(*[]*VendorLog)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendorLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendorLog))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorLogR{}
		}
		args[object.VendorID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorLogR{}
			}

			args[obj.VendorID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`Vendors`),
		qm.WhereIn(`Vendors.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Vendor")
	}

	var resultSlice []*Vendor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Vendor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Vendors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Vendors")
	}

	if len(vendorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Vendor = foreign
		if foreign.R == nil {
			foreign.R = &vendorR{}
		}
		foreign.R.VendorVendorLogs = append(foreign.R.VendorVendorLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VendorID == foreign.ID {
				local.R.Vendor = foreign
				if foreign.R == nil {
					foreign.R = &vendorR{}
				}
				foreign.R.VendorVendorLogs = append(foreign.R.VendorVendorLogs, local)
				break
			}
		}
	}

	return nil
}

// SetVendor of the vendorLog to the related item.
// Sets o.R.Vendor to related.
// Adds o to related.R.VendorVendorLogs.
func (o *VendorLog) SetVendor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Vendor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"VendorLog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_id"}),
		strmangle.WhereClause("\"", "\"", 2, vendorLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VendorID = related.ID
	if o.R == nil {
		o.R = &vendorLogR{
			Vendor: related,
		}
	} else {
		o.R.Vendor = related
	}

	if related.R == nil {
		related.R = &vendorR{
			VendorVendorLogs: VendorLogSlice{o},
		}
	} else {
		related.R.VendorVendorLogs = append(related.R.VendorVendorLogs, o)
	}

	return nil
}

// VendorLogs retrieves all the records using an executor.
func VendorLogs(mods ...qm.QueryMod) vendorLogQuery {
	mods = append(mods, qm.From("\"VendorLog\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"VendorLog\".*"})
	}

	return vendorLogQuery{q}
}

// FindVendorLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVendorLog(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*VendorLog, error) {
	vendorLogObj := &VendorLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"VendorLog\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, vendorLogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from VendorLog")
	}

	if err = vendorLogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vendorLogObj, err
	}

	return vendorLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VendorLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no VendorLog provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vendorLogInsertCacheMut.RLock()
	cache, cached := vendorLogInsertCache[key]
	vendorLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vendorLogAllColumns,
			vendorLogColumnsWithDefault,
			vendorLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vendorLogType, vendorLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vendorLogType, vendorLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"VendorLog\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"VendorLog\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into VendorLog")
	}

	if !cached {
		vendorLogInsertCacheMut.Lock()
		vendorLogInsertCache[key] = cache
		vendorLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VendorLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VendorLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vendorLogUpdateCacheMut.RLock()
	cache, cached := vendorLogUpdateCache[key]
	vendorLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vendorLogAllColumns,
			vendorLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update VendorLog, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"VendorLog\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vendorLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vendorLogType, vendorLogMapping, append(wl, vendorLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update VendorLog row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for VendorLog")
	}

	if !cached {
		vendorLogUpdateCacheMut.Lock()
		vendorLogUpdateCache[key] = cache
		vendorLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vendorLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for VendorLog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for VendorLog")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VendorLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"VendorLog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vendorLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vendorLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vendorLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VendorLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no VendorLog provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vendorLogUpsertCacheMut.RLock()
	cache, cached := vendorLogUpsertCache[key]
	vendorLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			vendorLogAllColumns,
			vendorLogColumnsWithDefault,
			vendorLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vendorLogAllColumns,
			vendorLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert VendorLog, could not build update column list")
		}

		ret := strmangle.SetComplement(vendorLogAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(vendorLogPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert VendorLog, could not build conflict column list")
			}

			conflict = make([]string, len(vendorLogPrimaryKeyColumns))
			copy(conflict, vendorLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"VendorLog\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(vendorLogType, vendorLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vendorLogType, vendorLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert VendorLog")
	}

	if !cached {
		vendorLogUpsertCacheMut.Lock()
		vendorLogUpsertCache[key] = cache
		vendorLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VendorLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VendorLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VendorLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vendorLogPrimaryKeyMapping)
	sql := "DELETE FROM \"VendorLog\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from VendorLog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for VendorLog")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vendorLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vendorLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from VendorLog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for VendorLog")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VendorLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vendorLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"VendorLog\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vendorLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for VendorLog")
	}

	if len(vendorLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VendorLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVendorLog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VendorLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VendorLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"VendorLog\".* FROM \"VendorLog\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VendorLogSlice")
	}

	*o = slice

	return nil
}

// VendorLogExists checks if the VendorLog row exists.
func VendorLogExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"VendorLog\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if VendorLog exists")
	}

	return exists, nil
}

// Exists checks if the VendorLog row exists.
func (o *VendorLog) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VendorLogExists(ctx, exec, o.ID)
}
