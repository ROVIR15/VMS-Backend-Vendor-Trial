// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VendorRefundAndCancellationPolicy is an object representing the database table.
type VendorRefundAndCancellationPolicy struct {
	ID                    int  `boil:"id" json:"id" toml:"id" yaml:"id"`
	VendorID              int  `boil:"vendor_id" json:"vendor_id" toml:"vendor_id" yaml:"vendor_id"`
	IsGuestPayTransaction bool `boil:"is_guest_pay_transaction" json:"is_guest_pay_transaction" toml:"is_guest_pay_transaction" yaml:"is_guest_pay_transaction"`

	R *vendorRefundAndCancellationPolicyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vendorRefundAndCancellationPolicyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VendorRefundAndCancellationPolicyColumns = struct {
	ID                    string
	VendorID              string
	IsGuestPayTransaction string
}{
	ID:                    "id",
	VendorID:              "vendor_id",
	IsGuestPayTransaction: "is_guest_pay_transaction",
}

var VendorRefundAndCancellationPolicyTableColumns = struct {
	ID                    string
	VendorID              string
	IsGuestPayTransaction string
}{
	ID:                    "VendorRefundAndCancellationPolicy.id",
	VendorID:              "VendorRefundAndCancellationPolicy.vendor_id",
	IsGuestPayTransaction: "VendorRefundAndCancellationPolicy.is_guest_pay_transaction",
}

// Generated where

var VendorRefundAndCancellationPolicyWhere = struct {
	ID                    whereHelperint
	VendorID              whereHelperint
	IsGuestPayTransaction whereHelperbool
}{
	ID:                    whereHelperint{field: "\"VendorRefundAndCancellationPolicy\".\"id\""},
	VendorID:              whereHelperint{field: "\"VendorRefundAndCancellationPolicy\".\"vendor_id\""},
	IsGuestPayTransaction: whereHelperbool{field: "\"VendorRefundAndCancellationPolicy\".\"is_guest_pay_transaction\""},
}

// VendorRefundAndCancellationPolicyRels is where relationship names are stored.
var VendorRefundAndCancellationPolicyRels = struct {
	Vendor                                                                   string
	VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues string
}{
	Vendor: "Vendor",
	VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues: "VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues",
}

// vendorRefundAndCancellationPolicyR is where relationships are stored.
type vendorRefundAndCancellationPolicyR struct {
	Vendor                                                                   *Vendor                                     `boil:"Vendor" json:"Vendor" toml:"Vendor" yaml:"Vendor"`
	VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues VendorRefundAndCancellationPolicyValueSlice `boil:"VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues" json:"VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues" toml:"VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues" yaml:"VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues"`
}

// NewStruct creates a new relationship struct
func (*vendorRefundAndCancellationPolicyR) NewStruct() *vendorRefundAndCancellationPolicyR {
	return &vendorRefundAndCancellationPolicyR{}
}

func (r *vendorRefundAndCancellationPolicyR) GetVendor() *Vendor {
	if r == nil {
		return nil
	}
	return r.Vendor
}

func (r *vendorRefundAndCancellationPolicyR) GetVendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues() VendorRefundAndCancellationPolicyValueSlice {
	if r == nil {
		return nil
	}
	return r.VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues
}

// vendorRefundAndCancellationPolicyL is where Load methods for each relationship are stored.
type vendorRefundAndCancellationPolicyL struct{}

var (
	vendorRefundAndCancellationPolicyAllColumns            = []string{"id", "vendor_id", "is_guest_pay_transaction"}
	vendorRefundAndCancellationPolicyColumnsWithoutDefault = []string{"vendor_id"}
	vendorRefundAndCancellationPolicyColumnsWithDefault    = []string{"id", "is_guest_pay_transaction"}
	vendorRefundAndCancellationPolicyPrimaryKeyColumns     = []string{"id"}
	vendorRefundAndCancellationPolicyGeneratedColumns      = []string{}
)

type (
	// VendorRefundAndCancellationPolicySlice is an alias for a slice of pointers to VendorRefundAndCancellationPolicy.
	// This should almost always be used instead of []VendorRefundAndCancellationPolicy.
	VendorRefundAndCancellationPolicySlice []*VendorRefundAndCancellationPolicy
	// VendorRefundAndCancellationPolicyHook is the signature for custom VendorRefundAndCancellationPolicy hook methods
	VendorRefundAndCancellationPolicyHook func(context.Context, boil.ContextExecutor, *VendorRefundAndCancellationPolicy) error

	vendorRefundAndCancellationPolicyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vendorRefundAndCancellationPolicyType                 = reflect.TypeOf(&VendorRefundAndCancellationPolicy{})
	vendorRefundAndCancellationPolicyMapping              = queries.MakeStructMapping(vendorRefundAndCancellationPolicyType)
	vendorRefundAndCancellationPolicyPrimaryKeyMapping, _ = queries.BindMapping(vendorRefundAndCancellationPolicyType, vendorRefundAndCancellationPolicyMapping, vendorRefundAndCancellationPolicyPrimaryKeyColumns)
	vendorRefundAndCancellationPolicyInsertCacheMut       sync.RWMutex
	vendorRefundAndCancellationPolicyInsertCache          = make(map[string]insertCache)
	vendorRefundAndCancellationPolicyUpdateCacheMut       sync.RWMutex
	vendorRefundAndCancellationPolicyUpdateCache          = make(map[string]updateCache)
	vendorRefundAndCancellationPolicyUpsertCacheMut       sync.RWMutex
	vendorRefundAndCancellationPolicyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vendorRefundAndCancellationPolicyAfterSelectMu sync.Mutex
var vendorRefundAndCancellationPolicyAfterSelectHooks []VendorRefundAndCancellationPolicyHook

var vendorRefundAndCancellationPolicyBeforeInsertMu sync.Mutex
var vendorRefundAndCancellationPolicyBeforeInsertHooks []VendorRefundAndCancellationPolicyHook
var vendorRefundAndCancellationPolicyAfterInsertMu sync.Mutex
var vendorRefundAndCancellationPolicyAfterInsertHooks []VendorRefundAndCancellationPolicyHook

var vendorRefundAndCancellationPolicyBeforeUpdateMu sync.Mutex
var vendorRefundAndCancellationPolicyBeforeUpdateHooks []VendorRefundAndCancellationPolicyHook
var vendorRefundAndCancellationPolicyAfterUpdateMu sync.Mutex
var vendorRefundAndCancellationPolicyAfterUpdateHooks []VendorRefundAndCancellationPolicyHook

var vendorRefundAndCancellationPolicyBeforeDeleteMu sync.Mutex
var vendorRefundAndCancellationPolicyBeforeDeleteHooks []VendorRefundAndCancellationPolicyHook
var vendorRefundAndCancellationPolicyAfterDeleteMu sync.Mutex
var vendorRefundAndCancellationPolicyAfterDeleteHooks []VendorRefundAndCancellationPolicyHook

var vendorRefundAndCancellationPolicyBeforeUpsertMu sync.Mutex
var vendorRefundAndCancellationPolicyBeforeUpsertHooks []VendorRefundAndCancellationPolicyHook
var vendorRefundAndCancellationPolicyAfterUpsertMu sync.Mutex
var vendorRefundAndCancellationPolicyAfterUpsertHooks []VendorRefundAndCancellationPolicyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VendorRefundAndCancellationPolicy) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VendorRefundAndCancellationPolicy) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VendorRefundAndCancellationPolicy) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VendorRefundAndCancellationPolicy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VendorRefundAndCancellationPolicy) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VendorRefundAndCancellationPolicy) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VendorRefundAndCancellationPolicy) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VendorRefundAndCancellationPolicy) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VendorRefundAndCancellationPolicy) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorRefundAndCancellationPolicyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVendorRefundAndCancellationPolicyHook registers your hook function for all future operations.
func AddVendorRefundAndCancellationPolicyHook(hookPoint boil.HookPoint, vendorRefundAndCancellationPolicyHook VendorRefundAndCancellationPolicyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vendorRefundAndCancellationPolicyAfterSelectMu.Lock()
		vendorRefundAndCancellationPolicyAfterSelectHooks = append(vendorRefundAndCancellationPolicyAfterSelectHooks, vendorRefundAndCancellationPolicyHook)
		vendorRefundAndCancellationPolicyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		vendorRefundAndCancellationPolicyBeforeInsertMu.Lock()
		vendorRefundAndCancellationPolicyBeforeInsertHooks = append(vendorRefundAndCancellationPolicyBeforeInsertHooks, vendorRefundAndCancellationPolicyHook)
		vendorRefundAndCancellationPolicyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		vendorRefundAndCancellationPolicyAfterInsertMu.Lock()
		vendorRefundAndCancellationPolicyAfterInsertHooks = append(vendorRefundAndCancellationPolicyAfterInsertHooks, vendorRefundAndCancellationPolicyHook)
		vendorRefundAndCancellationPolicyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		vendorRefundAndCancellationPolicyBeforeUpdateMu.Lock()
		vendorRefundAndCancellationPolicyBeforeUpdateHooks = append(vendorRefundAndCancellationPolicyBeforeUpdateHooks, vendorRefundAndCancellationPolicyHook)
		vendorRefundAndCancellationPolicyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		vendorRefundAndCancellationPolicyAfterUpdateMu.Lock()
		vendorRefundAndCancellationPolicyAfterUpdateHooks = append(vendorRefundAndCancellationPolicyAfterUpdateHooks, vendorRefundAndCancellationPolicyHook)
		vendorRefundAndCancellationPolicyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		vendorRefundAndCancellationPolicyBeforeDeleteMu.Lock()
		vendorRefundAndCancellationPolicyBeforeDeleteHooks = append(vendorRefundAndCancellationPolicyBeforeDeleteHooks, vendorRefundAndCancellationPolicyHook)
		vendorRefundAndCancellationPolicyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		vendorRefundAndCancellationPolicyAfterDeleteMu.Lock()
		vendorRefundAndCancellationPolicyAfterDeleteHooks = append(vendorRefundAndCancellationPolicyAfterDeleteHooks, vendorRefundAndCancellationPolicyHook)
		vendorRefundAndCancellationPolicyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		vendorRefundAndCancellationPolicyBeforeUpsertMu.Lock()
		vendorRefundAndCancellationPolicyBeforeUpsertHooks = append(vendorRefundAndCancellationPolicyBeforeUpsertHooks, vendorRefundAndCancellationPolicyHook)
		vendorRefundAndCancellationPolicyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		vendorRefundAndCancellationPolicyAfterUpsertMu.Lock()
		vendorRefundAndCancellationPolicyAfterUpsertHooks = append(vendorRefundAndCancellationPolicyAfterUpsertHooks, vendorRefundAndCancellationPolicyHook)
		vendorRefundAndCancellationPolicyAfterUpsertMu.Unlock()
	}
}

// One returns a single vendorRefundAndCancellationPolicy record from the query.
func (q vendorRefundAndCancellationPolicyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VendorRefundAndCancellationPolicy, error) {
	o := &VendorRefundAndCancellationPolicy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for VendorRefundAndCancellationPolicy")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VendorRefundAndCancellationPolicy records from the query.
func (q vendorRefundAndCancellationPolicyQuery) All(ctx context.Context, exec boil.ContextExecutor) (VendorRefundAndCancellationPolicySlice, error) {
	var o []*VendorRefundAndCancellationPolicy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VendorRefundAndCancellationPolicy slice")
	}

	if len(vendorRefundAndCancellationPolicyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VendorRefundAndCancellationPolicy records in the query.
func (q vendorRefundAndCancellationPolicyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count VendorRefundAndCancellationPolicy rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vendorRefundAndCancellationPolicyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if VendorRefundAndCancellationPolicy exists")
	}

	return count > 0, nil
}

// Vendor pointed to by the foreign key.
func (o *VendorRefundAndCancellationPolicy) Vendor(mods ...qm.QueryMod) vendorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VendorID),
	}

	queryMods = append(queryMods, mods...)

	return Vendors(queryMods...)
}

// VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues retrieves all the VendorRefundAndCancellationPolicyValue's VendorRefundAndCancellationPolicyValues with an executor via vendor_refund_and_cancellation_policy_id column.
func (o *VendorRefundAndCancellationPolicy) VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues(mods ...qm.QueryMod) vendorRefundAndCancellationPolicyValueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"VendorRefundAndCancellationPolicyValue\".\"vendor_refund_and_cancellation_policy_id\"=?", o.ID),
	)

	return VendorRefundAndCancellationPolicyValues(queryMods...)
}

// LoadVendor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vendorRefundAndCancellationPolicyL) LoadVendor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendorRefundAndCancellationPolicy interface{}, mods queries.Applicator) error {
	var slice []*VendorRefundAndCancellationPolicy
	var object *VendorRefundAndCancellationPolicy

	if singular {
		var ok bool
		object, ok = maybeVendorRefundAndCancellationPolicy.(*VendorRefundAndCancellationPolicy)
		if !ok {
			object = new(VendorRefundAndCancellationPolicy)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendorRefundAndCancellationPolicy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendorRefundAndCancellationPolicy))
			}
		}
	} else {
		s, ok := maybeVendorRefundAndCancellationPolicy.(*[]*VendorRefundAndCancellationPolicy)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendorRefundAndCancellationPolicy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendorRefundAndCancellationPolicy))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorRefundAndCancellationPolicyR{}
		}
		args[object.VendorID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorRefundAndCancellationPolicyR{}
			}

			args[obj.VendorID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`Vendors`),
		qm.WhereIn(`Vendors.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Vendor")
	}

	var resultSlice []*Vendor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Vendor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Vendors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Vendors")
	}

	if len(vendorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Vendor = foreign
		if foreign.R == nil {
			foreign.R = &vendorR{}
		}
		foreign.R.VendorVendorRefundAndCancellationPolicy = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VendorID == foreign.ID {
				local.R.Vendor = foreign
				if foreign.R == nil {
					foreign.R = &vendorR{}
				}
				foreign.R.VendorVendorRefundAndCancellationPolicy = local
				break
			}
		}
	}

	return nil
}

// LoadVendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (vendorRefundAndCancellationPolicyL) LoadVendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendorRefundAndCancellationPolicy interface{}, mods queries.Applicator) error {
	var slice []*VendorRefundAndCancellationPolicy
	var object *VendorRefundAndCancellationPolicy

	if singular {
		var ok bool
		object, ok = maybeVendorRefundAndCancellationPolicy.(*VendorRefundAndCancellationPolicy)
		if !ok {
			object = new(VendorRefundAndCancellationPolicy)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendorRefundAndCancellationPolicy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendorRefundAndCancellationPolicy))
			}
		}
	} else {
		s, ok := maybeVendorRefundAndCancellationPolicy.(*[]*VendorRefundAndCancellationPolicy)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendorRefundAndCancellationPolicy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendorRefundAndCancellationPolicy))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorRefundAndCancellationPolicyR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorRefundAndCancellationPolicyR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`VendorRefundAndCancellationPolicyValue`),
		qm.WhereIn(`VendorRefundAndCancellationPolicyValue.vendor_refund_and_cancellation_policy_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VendorRefundAndCancellationPolicyValue")
	}

	var resultSlice []*VendorRefundAndCancellationPolicyValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VendorRefundAndCancellationPolicyValue")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on VendorRefundAndCancellationPolicyValue")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for VendorRefundAndCancellationPolicyValue")
	}

	if len(vendorRefundAndCancellationPolicyValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &vendorRefundAndCancellationPolicyValueR{}
			}
			foreign.R.VendorRefundAndCancellationPolicy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VendorRefundAndCancellationPolicyID {
				local.R.VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues = append(local.R.VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues, foreign)
				if foreign.R == nil {
					foreign.R = &vendorRefundAndCancellationPolicyValueR{}
				}
				foreign.R.VendorRefundAndCancellationPolicy = local
				break
			}
		}
	}

	return nil
}

// SetVendor of the vendorRefundAndCancellationPolicy to the related item.
// Sets o.R.Vendor to related.
// Adds o to related.R.VendorVendorRefundAndCancellationPolicy.
func (o *VendorRefundAndCancellationPolicy) SetVendor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Vendor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"VendorRefundAndCancellationPolicy\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_id"}),
		strmangle.WhereClause("\"", "\"", 2, vendorRefundAndCancellationPolicyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VendorID = related.ID
	if o.R == nil {
		o.R = &vendorRefundAndCancellationPolicyR{
			Vendor: related,
		}
	} else {
		o.R.Vendor = related
	}

	if related.R == nil {
		related.R = &vendorR{
			VendorVendorRefundAndCancellationPolicy: o,
		}
	} else {
		related.R.VendorVendorRefundAndCancellationPolicy = o
	}

	return nil
}

// AddVendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues adds the given related objects to the existing relationships
// of the VendorRefundAndCancellationPolicy, optionally inserting them as new records.
// Appends related to o.R.VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues.
// Sets related.R.VendorRefundAndCancellationPolicy appropriately.
func (o *VendorRefundAndCancellationPolicy) AddVendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VendorRefundAndCancellationPolicyValue) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VendorRefundAndCancellationPolicyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"VendorRefundAndCancellationPolicyValue\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_refund_and_cancellation_policy_id"}),
				strmangle.WhereClause("\"", "\"", 2, vendorRefundAndCancellationPolicyValuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VendorRefundAndCancellationPolicyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &vendorRefundAndCancellationPolicyR{
			VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues: related,
		}
	} else {
		o.R.VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues = append(o.R.VendorRefundAndCancellationPolicyVendorRefundAndCancellationPolicyValues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &vendorRefundAndCancellationPolicyValueR{
				VendorRefundAndCancellationPolicy: o,
			}
		} else {
			rel.R.VendorRefundAndCancellationPolicy = o
		}
	}
	return nil
}

// VendorRefundAndCancellationPolicies retrieves all the records using an executor.
func VendorRefundAndCancellationPolicies(mods ...qm.QueryMod) vendorRefundAndCancellationPolicyQuery {
	mods = append(mods, qm.From("\"VendorRefundAndCancellationPolicy\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"VendorRefundAndCancellationPolicy\".*"})
	}

	return vendorRefundAndCancellationPolicyQuery{q}
}

// FindVendorRefundAndCancellationPolicy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVendorRefundAndCancellationPolicy(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*VendorRefundAndCancellationPolicy, error) {
	vendorRefundAndCancellationPolicyObj := &VendorRefundAndCancellationPolicy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"VendorRefundAndCancellationPolicy\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, vendorRefundAndCancellationPolicyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from VendorRefundAndCancellationPolicy")
	}

	if err = vendorRefundAndCancellationPolicyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vendorRefundAndCancellationPolicyObj, err
	}

	return vendorRefundAndCancellationPolicyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VendorRefundAndCancellationPolicy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no VendorRefundAndCancellationPolicy provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorRefundAndCancellationPolicyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vendorRefundAndCancellationPolicyInsertCacheMut.RLock()
	cache, cached := vendorRefundAndCancellationPolicyInsertCache[key]
	vendorRefundAndCancellationPolicyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vendorRefundAndCancellationPolicyAllColumns,
			vendorRefundAndCancellationPolicyColumnsWithDefault,
			vendorRefundAndCancellationPolicyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vendorRefundAndCancellationPolicyType, vendorRefundAndCancellationPolicyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vendorRefundAndCancellationPolicyType, vendorRefundAndCancellationPolicyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"VendorRefundAndCancellationPolicy\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"VendorRefundAndCancellationPolicy\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into VendorRefundAndCancellationPolicy")
	}

	if !cached {
		vendorRefundAndCancellationPolicyInsertCacheMut.Lock()
		vendorRefundAndCancellationPolicyInsertCache[key] = cache
		vendorRefundAndCancellationPolicyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VendorRefundAndCancellationPolicy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VendorRefundAndCancellationPolicy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vendorRefundAndCancellationPolicyUpdateCacheMut.RLock()
	cache, cached := vendorRefundAndCancellationPolicyUpdateCache[key]
	vendorRefundAndCancellationPolicyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vendorRefundAndCancellationPolicyAllColumns,
			vendorRefundAndCancellationPolicyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update VendorRefundAndCancellationPolicy, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"VendorRefundAndCancellationPolicy\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vendorRefundAndCancellationPolicyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vendorRefundAndCancellationPolicyType, vendorRefundAndCancellationPolicyMapping, append(wl, vendorRefundAndCancellationPolicyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update VendorRefundAndCancellationPolicy row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for VendorRefundAndCancellationPolicy")
	}

	if !cached {
		vendorRefundAndCancellationPolicyUpdateCacheMut.Lock()
		vendorRefundAndCancellationPolicyUpdateCache[key] = cache
		vendorRefundAndCancellationPolicyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vendorRefundAndCancellationPolicyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for VendorRefundAndCancellationPolicy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for VendorRefundAndCancellationPolicy")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VendorRefundAndCancellationPolicySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorRefundAndCancellationPolicyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"VendorRefundAndCancellationPolicy\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vendorRefundAndCancellationPolicyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vendorRefundAndCancellationPolicy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vendorRefundAndCancellationPolicy")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VendorRefundAndCancellationPolicy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no VendorRefundAndCancellationPolicy provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorRefundAndCancellationPolicyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vendorRefundAndCancellationPolicyUpsertCacheMut.RLock()
	cache, cached := vendorRefundAndCancellationPolicyUpsertCache[key]
	vendorRefundAndCancellationPolicyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			vendorRefundAndCancellationPolicyAllColumns,
			vendorRefundAndCancellationPolicyColumnsWithDefault,
			vendorRefundAndCancellationPolicyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vendorRefundAndCancellationPolicyAllColumns,
			vendorRefundAndCancellationPolicyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert VendorRefundAndCancellationPolicy, could not build update column list")
		}

		ret := strmangle.SetComplement(vendorRefundAndCancellationPolicyAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(vendorRefundAndCancellationPolicyPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert VendorRefundAndCancellationPolicy, could not build conflict column list")
			}

			conflict = make([]string, len(vendorRefundAndCancellationPolicyPrimaryKeyColumns))
			copy(conflict, vendorRefundAndCancellationPolicyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"VendorRefundAndCancellationPolicy\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(vendorRefundAndCancellationPolicyType, vendorRefundAndCancellationPolicyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vendorRefundAndCancellationPolicyType, vendorRefundAndCancellationPolicyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert VendorRefundAndCancellationPolicy")
	}

	if !cached {
		vendorRefundAndCancellationPolicyUpsertCacheMut.Lock()
		vendorRefundAndCancellationPolicyUpsertCache[key] = cache
		vendorRefundAndCancellationPolicyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VendorRefundAndCancellationPolicy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VendorRefundAndCancellationPolicy) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VendorRefundAndCancellationPolicy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vendorRefundAndCancellationPolicyPrimaryKeyMapping)
	sql := "DELETE FROM \"VendorRefundAndCancellationPolicy\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from VendorRefundAndCancellationPolicy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for VendorRefundAndCancellationPolicy")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vendorRefundAndCancellationPolicyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vendorRefundAndCancellationPolicyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from VendorRefundAndCancellationPolicy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for VendorRefundAndCancellationPolicy")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VendorRefundAndCancellationPolicySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vendorRefundAndCancellationPolicyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorRefundAndCancellationPolicyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"VendorRefundAndCancellationPolicy\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorRefundAndCancellationPolicyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vendorRefundAndCancellationPolicy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for VendorRefundAndCancellationPolicy")
	}

	if len(vendorRefundAndCancellationPolicyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VendorRefundAndCancellationPolicy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVendorRefundAndCancellationPolicy(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VendorRefundAndCancellationPolicySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VendorRefundAndCancellationPolicySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorRefundAndCancellationPolicyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"VendorRefundAndCancellationPolicy\".* FROM \"VendorRefundAndCancellationPolicy\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorRefundAndCancellationPolicyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VendorRefundAndCancellationPolicySlice")
	}

	*o = slice

	return nil
}

// VendorRefundAndCancellationPolicyExists checks if the VendorRefundAndCancellationPolicy row exists.
func VendorRefundAndCancellationPolicyExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"VendorRefundAndCancellationPolicy\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if VendorRefundAndCancellationPolicy exists")
	}

	return exists, nil
}

// Exists checks if the VendorRefundAndCancellationPolicy row exists.
func (o *VendorRefundAndCancellationPolicy) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VendorRefundAndCancellationPolicyExists(ctx, exec, o.ID)
}
