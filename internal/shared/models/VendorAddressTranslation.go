// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VendorAddressTranslation is an object representing the database table.
type VendorAddressTranslation struct {
	VendorAddressID int         `boil:"vendor_address_id" json:"vendor_address_id" toml:"vendor_address_id" yaml:"vendor_address_id"`
	LanguageID      int         `boil:"language_id" json:"language_id" toml:"language_id" yaml:"language_id"`
	Address         null.String `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`

	R *vendorAddressTranslationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vendorAddressTranslationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VendorAddressTranslationColumns = struct {
	VendorAddressID string
	LanguageID      string
	Address         string
}{
	VendorAddressID: "vendor_address_id",
	LanguageID:      "language_id",
	Address:         "address",
}

var VendorAddressTranslationTableColumns = struct {
	VendorAddressID string
	LanguageID      string
	Address         string
}{
	VendorAddressID: "VendorAddressTranslation.vendor_address_id",
	LanguageID:      "VendorAddressTranslation.language_id",
	Address:         "VendorAddressTranslation.address",
}

// Generated where

var VendorAddressTranslationWhere = struct {
	VendorAddressID whereHelperint
	LanguageID      whereHelperint
	Address         whereHelpernull_String
}{
	VendorAddressID: whereHelperint{field: "\"VendorAddressTranslation\".\"vendor_address_id\""},
	LanguageID:      whereHelperint{field: "\"VendorAddressTranslation\".\"language_id\""},
	Address:         whereHelpernull_String{field: "\"VendorAddressTranslation\".\"address\""},
}

// VendorAddressTranslationRels is where relationship names are stored.
var VendorAddressTranslationRels = struct {
	VendorAddress string
	Language      string
}{
	VendorAddress: "VendorAddress",
	Language:      "Language",
}

// vendorAddressTranslationR is where relationships are stored.
type vendorAddressTranslationR struct {
	VendorAddress *VendorAddress `boil:"VendorAddress" json:"VendorAddress" toml:"VendorAddress" yaml:"VendorAddress"`
	Language      *Language      `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
}

// NewStruct creates a new relationship struct
func (*vendorAddressTranslationR) NewStruct() *vendorAddressTranslationR {
	return &vendorAddressTranslationR{}
}

func (r *vendorAddressTranslationR) GetVendorAddress() *VendorAddress {
	if r == nil {
		return nil
	}
	return r.VendorAddress
}

func (r *vendorAddressTranslationR) GetLanguage() *Language {
	if r == nil {
		return nil
	}
	return r.Language
}

// vendorAddressTranslationL is where Load methods for each relationship are stored.
type vendorAddressTranslationL struct{}

var (
	vendorAddressTranslationAllColumns            = []string{"vendor_address_id", "language_id", "address"}
	vendorAddressTranslationColumnsWithoutDefault = []string{"vendor_address_id", "language_id"}
	vendorAddressTranslationColumnsWithDefault    = []string{"address"}
	vendorAddressTranslationPrimaryKeyColumns     = []string{"vendor_address_id", "language_id"}
	vendorAddressTranslationGeneratedColumns      = []string{}
)

type (
	// VendorAddressTranslationSlice is an alias for a slice of pointers to VendorAddressTranslation.
	// This should almost always be used instead of []VendorAddressTranslation.
	VendorAddressTranslationSlice []*VendorAddressTranslation
	// VendorAddressTranslationHook is the signature for custom VendorAddressTranslation hook methods
	VendorAddressTranslationHook func(context.Context, boil.ContextExecutor, *VendorAddressTranslation) error

	vendorAddressTranslationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vendorAddressTranslationType                 = reflect.TypeOf(&VendorAddressTranslation{})
	vendorAddressTranslationMapping              = queries.MakeStructMapping(vendorAddressTranslationType)
	vendorAddressTranslationPrimaryKeyMapping, _ = queries.BindMapping(vendorAddressTranslationType, vendorAddressTranslationMapping, vendorAddressTranslationPrimaryKeyColumns)
	vendorAddressTranslationInsertCacheMut       sync.RWMutex
	vendorAddressTranslationInsertCache          = make(map[string]insertCache)
	vendorAddressTranslationUpdateCacheMut       sync.RWMutex
	vendorAddressTranslationUpdateCache          = make(map[string]updateCache)
	vendorAddressTranslationUpsertCacheMut       sync.RWMutex
	vendorAddressTranslationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vendorAddressTranslationAfterSelectMu sync.Mutex
var vendorAddressTranslationAfterSelectHooks []VendorAddressTranslationHook

var vendorAddressTranslationBeforeInsertMu sync.Mutex
var vendorAddressTranslationBeforeInsertHooks []VendorAddressTranslationHook
var vendorAddressTranslationAfterInsertMu sync.Mutex
var vendorAddressTranslationAfterInsertHooks []VendorAddressTranslationHook

var vendorAddressTranslationBeforeUpdateMu sync.Mutex
var vendorAddressTranslationBeforeUpdateHooks []VendorAddressTranslationHook
var vendorAddressTranslationAfterUpdateMu sync.Mutex
var vendorAddressTranslationAfterUpdateHooks []VendorAddressTranslationHook

var vendorAddressTranslationBeforeDeleteMu sync.Mutex
var vendorAddressTranslationBeforeDeleteHooks []VendorAddressTranslationHook
var vendorAddressTranslationAfterDeleteMu sync.Mutex
var vendorAddressTranslationAfterDeleteHooks []VendorAddressTranslationHook

var vendorAddressTranslationBeforeUpsertMu sync.Mutex
var vendorAddressTranslationBeforeUpsertHooks []VendorAddressTranslationHook
var vendorAddressTranslationAfterUpsertMu sync.Mutex
var vendorAddressTranslationAfterUpsertHooks []VendorAddressTranslationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VendorAddressTranslation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressTranslationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VendorAddressTranslation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressTranslationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VendorAddressTranslation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressTranslationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VendorAddressTranslation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressTranslationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VendorAddressTranslation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressTranslationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VendorAddressTranslation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressTranslationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VendorAddressTranslation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressTranslationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VendorAddressTranslation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressTranslationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VendorAddressTranslation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAddressTranslationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVendorAddressTranslationHook registers your hook function for all future operations.
func AddVendorAddressTranslationHook(hookPoint boil.HookPoint, vendorAddressTranslationHook VendorAddressTranslationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vendorAddressTranslationAfterSelectMu.Lock()
		vendorAddressTranslationAfterSelectHooks = append(vendorAddressTranslationAfterSelectHooks, vendorAddressTranslationHook)
		vendorAddressTranslationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		vendorAddressTranslationBeforeInsertMu.Lock()
		vendorAddressTranslationBeforeInsertHooks = append(vendorAddressTranslationBeforeInsertHooks, vendorAddressTranslationHook)
		vendorAddressTranslationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		vendorAddressTranslationAfterInsertMu.Lock()
		vendorAddressTranslationAfterInsertHooks = append(vendorAddressTranslationAfterInsertHooks, vendorAddressTranslationHook)
		vendorAddressTranslationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		vendorAddressTranslationBeforeUpdateMu.Lock()
		vendorAddressTranslationBeforeUpdateHooks = append(vendorAddressTranslationBeforeUpdateHooks, vendorAddressTranslationHook)
		vendorAddressTranslationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		vendorAddressTranslationAfterUpdateMu.Lock()
		vendorAddressTranslationAfterUpdateHooks = append(vendorAddressTranslationAfterUpdateHooks, vendorAddressTranslationHook)
		vendorAddressTranslationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		vendorAddressTranslationBeforeDeleteMu.Lock()
		vendorAddressTranslationBeforeDeleteHooks = append(vendorAddressTranslationBeforeDeleteHooks, vendorAddressTranslationHook)
		vendorAddressTranslationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		vendorAddressTranslationAfterDeleteMu.Lock()
		vendorAddressTranslationAfterDeleteHooks = append(vendorAddressTranslationAfterDeleteHooks, vendorAddressTranslationHook)
		vendorAddressTranslationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		vendorAddressTranslationBeforeUpsertMu.Lock()
		vendorAddressTranslationBeforeUpsertHooks = append(vendorAddressTranslationBeforeUpsertHooks, vendorAddressTranslationHook)
		vendorAddressTranslationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		vendorAddressTranslationAfterUpsertMu.Lock()
		vendorAddressTranslationAfterUpsertHooks = append(vendorAddressTranslationAfterUpsertHooks, vendorAddressTranslationHook)
		vendorAddressTranslationAfterUpsertMu.Unlock()
	}
}

// One returns a single vendorAddressTranslation record from the query.
func (q vendorAddressTranslationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VendorAddressTranslation, error) {
	o := &VendorAddressTranslation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for VendorAddressTranslation")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VendorAddressTranslation records from the query.
func (q vendorAddressTranslationQuery) All(ctx context.Context, exec boil.ContextExecutor) (VendorAddressTranslationSlice, error) {
	var o []*VendorAddressTranslation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VendorAddressTranslation slice")
	}

	if len(vendorAddressTranslationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VendorAddressTranslation records in the query.
func (q vendorAddressTranslationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count VendorAddressTranslation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vendorAddressTranslationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if VendorAddressTranslation exists")
	}

	return count > 0, nil
}

// VendorAddress pointed to by the foreign key.
func (o *VendorAddressTranslation) VendorAddress(mods ...qm.QueryMod) vendorAddressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VendorAddressID),
	}

	queryMods = append(queryMods, mods...)

	return VendorAddresses(queryMods...)
}

// Language pointed to by the foreign key.
func (o *VendorAddressTranslation) Language(mods ...qm.QueryMod) languageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LanguageID),
	}

	queryMods = append(queryMods, mods...)

	return Languages(queryMods...)
}

// LoadVendorAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vendorAddressTranslationL) LoadVendorAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendorAddressTranslation interface{}, mods queries.Applicator) error {
	var slice []*VendorAddressTranslation
	var object *VendorAddressTranslation

	if singular {
		var ok bool
		object, ok = maybeVendorAddressTranslation.(*VendorAddressTranslation)
		if !ok {
			object = new(VendorAddressTranslation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendorAddressTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendorAddressTranslation))
			}
		}
	} else {
		s, ok := maybeVendorAddressTranslation.(*[]*VendorAddressTranslation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendorAddressTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendorAddressTranslation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorAddressTranslationR{}
		}
		args[object.VendorAddressID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorAddressTranslationR{}
			}

			args[obj.VendorAddressID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`VendorAddress`),
		qm.WhereIn(`VendorAddress.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VendorAddress")
	}

	var resultSlice []*VendorAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VendorAddress")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for VendorAddress")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for VendorAddress")
	}

	if len(vendorAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VendorAddress = foreign
		if foreign.R == nil {
			foreign.R = &vendorAddressR{}
		}
		foreign.R.VendorAddressVendorAddressTranslations = append(foreign.R.VendorAddressVendorAddressTranslations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VendorAddressID == foreign.ID {
				local.R.VendorAddress = foreign
				if foreign.R == nil {
					foreign.R = &vendorAddressR{}
				}
				foreign.R.VendorAddressVendorAddressTranslations = append(foreign.R.VendorAddressVendorAddressTranslations, local)
				break
			}
		}
	}

	return nil
}

// LoadLanguage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vendorAddressTranslationL) LoadLanguage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendorAddressTranslation interface{}, mods queries.Applicator) error {
	var slice []*VendorAddressTranslation
	var object *VendorAddressTranslation

	if singular {
		var ok bool
		object, ok = maybeVendorAddressTranslation.(*VendorAddressTranslation)
		if !ok {
			object = new(VendorAddressTranslation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendorAddressTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendorAddressTranslation))
			}
		}
	} else {
		s, ok := maybeVendorAddressTranslation.(*[]*VendorAddressTranslation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendorAddressTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendorAddressTranslation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorAddressTranslationR{}
		}
		args[object.LanguageID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorAddressTranslationR{}
			}

			args[obj.LanguageID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`Language`),
		qm.WhereIn(`Language.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Language")
	}

	var resultSlice []*Language
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Language")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Language")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Language")
	}

	if len(languageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Language = foreign
		if foreign.R == nil {
			foreign.R = &languageR{}
		}
		foreign.R.LanguageVendorAddressTranslations = append(foreign.R.LanguageVendorAddressTranslations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LanguageID == foreign.ID {
				local.R.Language = foreign
				if foreign.R == nil {
					foreign.R = &languageR{}
				}
				foreign.R.LanguageVendorAddressTranslations = append(foreign.R.LanguageVendorAddressTranslations, local)
				break
			}
		}
	}

	return nil
}

// SetVendorAddress of the vendorAddressTranslation to the related item.
// Sets o.R.VendorAddress to related.
// Adds o to related.R.VendorAddressVendorAddressTranslations.
func (o *VendorAddressTranslation) SetVendorAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VendorAddress) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"VendorAddressTranslation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_address_id"}),
		strmangle.WhereClause("\"", "\"", 2, vendorAddressTranslationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.VendorAddressID, o.LanguageID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VendorAddressID = related.ID
	if o.R == nil {
		o.R = &vendorAddressTranslationR{
			VendorAddress: related,
		}
	} else {
		o.R.VendorAddress = related
	}

	if related.R == nil {
		related.R = &vendorAddressR{
			VendorAddressVendorAddressTranslations: VendorAddressTranslationSlice{o},
		}
	} else {
		related.R.VendorAddressVendorAddressTranslations = append(related.R.VendorAddressVendorAddressTranslations, o)
	}

	return nil
}

// SetLanguage of the vendorAddressTranslation to the related item.
// Sets o.R.Language to related.
// Adds o to related.R.LanguageVendorAddressTranslations.
func (o *VendorAddressTranslation) SetLanguage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Language) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"VendorAddressTranslation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"language_id"}),
		strmangle.WhereClause("\"", "\"", 2, vendorAddressTranslationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.VendorAddressID, o.LanguageID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LanguageID = related.ID
	if o.R == nil {
		o.R = &vendorAddressTranslationR{
			Language: related,
		}
	} else {
		o.R.Language = related
	}

	if related.R == nil {
		related.R = &languageR{
			LanguageVendorAddressTranslations: VendorAddressTranslationSlice{o},
		}
	} else {
		related.R.LanguageVendorAddressTranslations = append(related.R.LanguageVendorAddressTranslations, o)
	}

	return nil
}

// VendorAddressTranslations retrieves all the records using an executor.
func VendorAddressTranslations(mods ...qm.QueryMod) vendorAddressTranslationQuery {
	mods = append(mods, qm.From("\"VendorAddressTranslation\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"VendorAddressTranslation\".*"})
	}

	return vendorAddressTranslationQuery{q}
}

// FindVendorAddressTranslation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVendorAddressTranslation(ctx context.Context, exec boil.ContextExecutor, vendorAddressID int, languageID int, selectCols ...string) (*VendorAddressTranslation, error) {
	vendorAddressTranslationObj := &VendorAddressTranslation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"VendorAddressTranslation\" where \"vendor_address_id\"=$1 AND \"language_id\"=$2", sel,
	)

	q := queries.Raw(query, vendorAddressID, languageID)

	err := q.Bind(ctx, exec, vendorAddressTranslationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from VendorAddressTranslation")
	}

	if err = vendorAddressTranslationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vendorAddressTranslationObj, err
	}

	return vendorAddressTranslationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VendorAddressTranslation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no VendorAddressTranslation provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorAddressTranslationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vendorAddressTranslationInsertCacheMut.RLock()
	cache, cached := vendorAddressTranslationInsertCache[key]
	vendorAddressTranslationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vendorAddressTranslationAllColumns,
			vendorAddressTranslationColumnsWithDefault,
			vendorAddressTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vendorAddressTranslationType, vendorAddressTranslationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vendorAddressTranslationType, vendorAddressTranslationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"VendorAddressTranslation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"VendorAddressTranslation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into VendorAddressTranslation")
	}

	if !cached {
		vendorAddressTranslationInsertCacheMut.Lock()
		vendorAddressTranslationInsertCache[key] = cache
		vendorAddressTranslationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VendorAddressTranslation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VendorAddressTranslation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vendorAddressTranslationUpdateCacheMut.RLock()
	cache, cached := vendorAddressTranslationUpdateCache[key]
	vendorAddressTranslationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vendorAddressTranslationAllColumns,
			vendorAddressTranslationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update VendorAddressTranslation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"VendorAddressTranslation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vendorAddressTranslationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vendorAddressTranslationType, vendorAddressTranslationMapping, append(wl, vendorAddressTranslationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update VendorAddressTranslation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for VendorAddressTranslation")
	}

	if !cached {
		vendorAddressTranslationUpdateCacheMut.Lock()
		vendorAddressTranslationUpdateCache[key] = cache
		vendorAddressTranslationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vendorAddressTranslationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for VendorAddressTranslation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for VendorAddressTranslation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VendorAddressTranslationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorAddressTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"VendorAddressTranslation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vendorAddressTranslationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vendorAddressTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vendorAddressTranslation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VendorAddressTranslation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no VendorAddressTranslation provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorAddressTranslationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vendorAddressTranslationUpsertCacheMut.RLock()
	cache, cached := vendorAddressTranslationUpsertCache[key]
	vendorAddressTranslationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			vendorAddressTranslationAllColumns,
			vendorAddressTranslationColumnsWithDefault,
			vendorAddressTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vendorAddressTranslationAllColumns,
			vendorAddressTranslationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert VendorAddressTranslation, could not build update column list")
		}

		ret := strmangle.SetComplement(vendorAddressTranslationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(vendorAddressTranslationPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert VendorAddressTranslation, could not build conflict column list")
			}

			conflict = make([]string, len(vendorAddressTranslationPrimaryKeyColumns))
			copy(conflict, vendorAddressTranslationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"VendorAddressTranslation\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(vendorAddressTranslationType, vendorAddressTranslationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vendorAddressTranslationType, vendorAddressTranslationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert VendorAddressTranslation")
	}

	if !cached {
		vendorAddressTranslationUpsertCacheMut.Lock()
		vendorAddressTranslationUpsertCache[key] = cache
		vendorAddressTranslationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VendorAddressTranslation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VendorAddressTranslation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VendorAddressTranslation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vendorAddressTranslationPrimaryKeyMapping)
	sql := "DELETE FROM \"VendorAddressTranslation\" WHERE \"vendor_address_id\"=$1 AND \"language_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from VendorAddressTranslation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for VendorAddressTranslation")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vendorAddressTranslationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vendorAddressTranslationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from VendorAddressTranslation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for VendorAddressTranslation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VendorAddressTranslationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vendorAddressTranslationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorAddressTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"VendorAddressTranslation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorAddressTranslationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vendorAddressTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for VendorAddressTranslation")
	}

	if len(vendorAddressTranslationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VendorAddressTranslation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVendorAddressTranslation(ctx, exec, o.VendorAddressID, o.LanguageID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VendorAddressTranslationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VendorAddressTranslationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorAddressTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"VendorAddressTranslation\".* FROM \"VendorAddressTranslation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorAddressTranslationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VendorAddressTranslationSlice")
	}

	*o = slice

	return nil
}

// VendorAddressTranslationExists checks if the VendorAddressTranslation row exists.
func VendorAddressTranslationExists(ctx context.Context, exec boil.ContextExecutor, vendorAddressID int, languageID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"VendorAddressTranslation\" where \"vendor_address_id\"=$1 AND \"language_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vendorAddressID, languageID)
	}
	row := exec.QueryRowContext(ctx, sql, vendorAddressID, languageID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if VendorAddressTranslation exists")
	}

	return exists, nil
}

// Exists checks if the VendorAddressTranslation row exists.
func (o *VendorAddressTranslation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VendorAddressTranslationExists(ctx, exec, o.VendorAddressID, o.LanguageID)
}
