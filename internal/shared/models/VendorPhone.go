// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VendorPhone is an object representing the database table.
type VendorPhone struct {
	ID               int                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	VendorID         null.Int            `boil:"vendor_id" json:"vendor_id,omitempty" toml:"vendor_id" yaml:"vendor_id,omitempty"`
	PhoneCountryCode null.String         `boil:"phone_country_code" json:"phone_country_code,omitempty" toml:"phone_country_code" yaml:"phone_country_code,omitempty"`
	VendorPhoneType  NullVendorPhoneType `boil:"vendor_phone_type" json:"vendor_phone_type,omitempty" toml:"vendor_phone_type" yaml:"vendor_phone_type,omitempty"`

	R *vendorPhoneR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vendorPhoneL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VendorPhoneColumns = struct {
	ID               string
	VendorID         string
	PhoneCountryCode string
	VendorPhoneType  string
}{
	ID:               "id",
	VendorID:         "vendor_id",
	PhoneCountryCode: "phone_country_code",
	VendorPhoneType:  "vendor_phone_type",
}

var VendorPhoneTableColumns = struct {
	ID               string
	VendorID         string
	PhoneCountryCode string
	VendorPhoneType  string
}{
	ID:               "VendorPhone.id",
	VendorID:         "VendorPhone.vendor_id",
	PhoneCountryCode: "VendorPhone.phone_country_code",
	VendorPhoneType:  "VendorPhone.vendor_phone_type",
}

// Generated where

type whereHelperNullVendorPhoneType struct{ field string }

func (w whereHelperNullVendorPhoneType) EQ(x NullVendorPhoneType) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperNullVendorPhoneType) NEQ(x NullVendorPhoneType) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperNullVendorPhoneType) LT(x NullVendorPhoneType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperNullVendorPhoneType) LTE(x NullVendorPhoneType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperNullVendorPhoneType) GT(x NullVendorPhoneType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperNullVendorPhoneType) GTE(x NullVendorPhoneType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperNullVendorPhoneType) IN(slice []NullVendorPhoneType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperNullVendorPhoneType) NIN(slice []NullVendorPhoneType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperNullVendorPhoneType) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperNullVendorPhoneType) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var VendorPhoneWhere = struct {
	ID               whereHelperint
	VendorID         whereHelpernull_Int
	PhoneCountryCode whereHelpernull_String
	VendorPhoneType  whereHelperNullVendorPhoneType
}{
	ID:               whereHelperint{field: "\"VendorPhone\".\"id\""},
	VendorID:         whereHelpernull_Int{field: "\"VendorPhone\".\"vendor_id\""},
	PhoneCountryCode: whereHelpernull_String{field: "\"VendorPhone\".\"phone_country_code\""},
	VendorPhoneType:  whereHelperNullVendorPhoneType{field: "\"VendorPhone\".\"vendor_phone_type\""},
}

// VendorPhoneRels is where relationship names are stored.
var VendorPhoneRels = struct {
	Vendor string
}{
	Vendor: "Vendor",
}

// vendorPhoneR is where relationships are stored.
type vendorPhoneR struct {
	Vendor *Vendor `boil:"Vendor" json:"Vendor" toml:"Vendor" yaml:"Vendor"`
}

// NewStruct creates a new relationship struct
func (*vendorPhoneR) NewStruct() *vendorPhoneR {
	return &vendorPhoneR{}
}

func (r *vendorPhoneR) GetVendor() *Vendor {
	if r == nil {
		return nil
	}
	return r.Vendor
}

// vendorPhoneL is where Load methods for each relationship are stored.
type vendorPhoneL struct{}

var (
	vendorPhoneAllColumns            = []string{"id", "vendor_id", "phone_country_code", "vendor_phone_type"}
	vendorPhoneColumnsWithoutDefault = []string{}
	vendorPhoneColumnsWithDefault    = []string{"id", "vendor_id", "phone_country_code", "vendor_phone_type"}
	vendorPhonePrimaryKeyColumns     = []string{"id"}
	vendorPhoneGeneratedColumns      = []string{}
)

type (
	// VendorPhoneSlice is an alias for a slice of pointers to VendorPhone.
	// This should almost always be used instead of []VendorPhone.
	VendorPhoneSlice []*VendorPhone
	// VendorPhoneHook is the signature for custom VendorPhone hook methods
	VendorPhoneHook func(context.Context, boil.ContextExecutor, *VendorPhone) error

	vendorPhoneQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vendorPhoneType                 = reflect.TypeOf(&VendorPhone{})
	vendorPhoneMapping              = queries.MakeStructMapping(vendorPhoneType)
	vendorPhonePrimaryKeyMapping, _ = queries.BindMapping(vendorPhoneType, vendorPhoneMapping, vendorPhonePrimaryKeyColumns)
	vendorPhoneInsertCacheMut       sync.RWMutex
	vendorPhoneInsertCache          = make(map[string]insertCache)
	vendorPhoneUpdateCacheMut       sync.RWMutex
	vendorPhoneUpdateCache          = make(map[string]updateCache)
	vendorPhoneUpsertCacheMut       sync.RWMutex
	vendorPhoneUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vendorPhoneAfterSelectMu sync.Mutex
var vendorPhoneAfterSelectHooks []VendorPhoneHook

var vendorPhoneBeforeInsertMu sync.Mutex
var vendorPhoneBeforeInsertHooks []VendorPhoneHook
var vendorPhoneAfterInsertMu sync.Mutex
var vendorPhoneAfterInsertHooks []VendorPhoneHook

var vendorPhoneBeforeUpdateMu sync.Mutex
var vendorPhoneBeforeUpdateHooks []VendorPhoneHook
var vendorPhoneAfterUpdateMu sync.Mutex
var vendorPhoneAfterUpdateHooks []VendorPhoneHook

var vendorPhoneBeforeDeleteMu sync.Mutex
var vendorPhoneBeforeDeleteHooks []VendorPhoneHook
var vendorPhoneAfterDeleteMu sync.Mutex
var vendorPhoneAfterDeleteHooks []VendorPhoneHook

var vendorPhoneBeforeUpsertMu sync.Mutex
var vendorPhoneBeforeUpsertHooks []VendorPhoneHook
var vendorPhoneAfterUpsertMu sync.Mutex
var vendorPhoneAfterUpsertHooks []VendorPhoneHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VendorPhone) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPhoneAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VendorPhone) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPhoneBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VendorPhone) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPhoneAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VendorPhone) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPhoneBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VendorPhone) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPhoneAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VendorPhone) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPhoneBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VendorPhone) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPhoneAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VendorPhone) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPhoneBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VendorPhone) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorPhoneAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVendorPhoneHook registers your hook function for all future operations.
func AddVendorPhoneHook(hookPoint boil.HookPoint, vendorPhoneHook VendorPhoneHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vendorPhoneAfterSelectMu.Lock()
		vendorPhoneAfterSelectHooks = append(vendorPhoneAfterSelectHooks, vendorPhoneHook)
		vendorPhoneAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		vendorPhoneBeforeInsertMu.Lock()
		vendorPhoneBeforeInsertHooks = append(vendorPhoneBeforeInsertHooks, vendorPhoneHook)
		vendorPhoneBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		vendorPhoneAfterInsertMu.Lock()
		vendorPhoneAfterInsertHooks = append(vendorPhoneAfterInsertHooks, vendorPhoneHook)
		vendorPhoneAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		vendorPhoneBeforeUpdateMu.Lock()
		vendorPhoneBeforeUpdateHooks = append(vendorPhoneBeforeUpdateHooks, vendorPhoneHook)
		vendorPhoneBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		vendorPhoneAfterUpdateMu.Lock()
		vendorPhoneAfterUpdateHooks = append(vendorPhoneAfterUpdateHooks, vendorPhoneHook)
		vendorPhoneAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		vendorPhoneBeforeDeleteMu.Lock()
		vendorPhoneBeforeDeleteHooks = append(vendorPhoneBeforeDeleteHooks, vendorPhoneHook)
		vendorPhoneBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		vendorPhoneAfterDeleteMu.Lock()
		vendorPhoneAfterDeleteHooks = append(vendorPhoneAfterDeleteHooks, vendorPhoneHook)
		vendorPhoneAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		vendorPhoneBeforeUpsertMu.Lock()
		vendorPhoneBeforeUpsertHooks = append(vendorPhoneBeforeUpsertHooks, vendorPhoneHook)
		vendorPhoneBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		vendorPhoneAfterUpsertMu.Lock()
		vendorPhoneAfterUpsertHooks = append(vendorPhoneAfterUpsertHooks, vendorPhoneHook)
		vendorPhoneAfterUpsertMu.Unlock()
	}
}

// One returns a single vendorPhone record from the query.
func (q vendorPhoneQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VendorPhone, error) {
	o := &VendorPhone{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for VendorPhone")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VendorPhone records from the query.
func (q vendorPhoneQuery) All(ctx context.Context, exec boil.ContextExecutor) (VendorPhoneSlice, error) {
	var o []*VendorPhone

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VendorPhone slice")
	}

	if len(vendorPhoneAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VendorPhone records in the query.
func (q vendorPhoneQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count VendorPhone rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vendorPhoneQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if VendorPhone exists")
	}

	return count > 0, nil
}

// Vendor pointed to by the foreign key.
func (o *VendorPhone) Vendor(mods ...qm.QueryMod) vendorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VendorID),
	}

	queryMods = append(queryMods, mods...)

	return Vendors(queryMods...)
}

// LoadVendor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vendorPhoneL) LoadVendor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendorPhone interface{}, mods queries.Applicator) error {
	var slice []*VendorPhone
	var object *VendorPhone

	if singular {
		var ok bool
		object, ok = maybeVendorPhone.(*VendorPhone)
		if !ok {
			object = new(VendorPhone)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendorPhone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendorPhone))
			}
		}
	} else {
		s, ok := maybeVendorPhone.(*[]*VendorPhone)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendorPhone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendorPhone))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorPhoneR{}
		}
		if !queries.IsNil(object.VendorID) {
			args[object.VendorID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorPhoneR{}
			}

			if !queries.IsNil(obj.VendorID) {
				args[obj.VendorID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`Vendors`),
		qm.WhereIn(`Vendors.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Vendor")
	}

	var resultSlice []*Vendor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Vendor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Vendors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Vendors")
	}

	if len(vendorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Vendor = foreign
		if foreign.R == nil {
			foreign.R = &vendorR{}
		}
		foreign.R.VendorVendorPhones = append(foreign.R.VendorVendorPhones, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.VendorID, foreign.ID) {
				local.R.Vendor = foreign
				if foreign.R == nil {
					foreign.R = &vendorR{}
				}
				foreign.R.VendorVendorPhones = append(foreign.R.VendorVendorPhones, local)
				break
			}
		}
	}

	return nil
}

// SetVendor of the vendorPhone to the related item.
// Sets o.R.Vendor to related.
// Adds o to related.R.VendorVendorPhones.
func (o *VendorPhone) SetVendor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Vendor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"VendorPhone\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_id"}),
		strmangle.WhereClause("\"", "\"", 2, vendorPhonePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.VendorID, related.ID)
	if o.R == nil {
		o.R = &vendorPhoneR{
			Vendor: related,
		}
	} else {
		o.R.Vendor = related
	}

	if related.R == nil {
		related.R = &vendorR{
			VendorVendorPhones: VendorPhoneSlice{o},
		}
	} else {
		related.R.VendorVendorPhones = append(related.R.VendorVendorPhones, o)
	}

	return nil
}

// RemoveVendor relationship.
// Sets o.R.Vendor to nil.
// Removes o from all passed in related items' relationships struct.
func (o *VendorPhone) RemoveVendor(ctx context.Context, exec boil.ContextExecutor, related *Vendor) error {
	var err error

	queries.SetScanner(&o.VendorID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("vendor_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Vendor = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.VendorVendorPhones {
		if queries.Equal(o.VendorID, ri.VendorID) {
			continue
		}

		ln := len(related.R.VendorVendorPhones)
		if ln > 1 && i < ln-1 {
			related.R.VendorVendorPhones[i] = related.R.VendorVendorPhones[ln-1]
		}
		related.R.VendorVendorPhones = related.R.VendorVendorPhones[:ln-1]
		break
	}
	return nil
}

// VendorPhones retrieves all the records using an executor.
func VendorPhones(mods ...qm.QueryMod) vendorPhoneQuery {
	mods = append(mods, qm.From("\"VendorPhone\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"VendorPhone\".*"})
	}

	return vendorPhoneQuery{q}
}

// FindVendorPhone retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVendorPhone(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*VendorPhone, error) {
	vendorPhoneObj := &VendorPhone{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"VendorPhone\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, vendorPhoneObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from VendorPhone")
	}

	if err = vendorPhoneObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vendorPhoneObj, err
	}

	return vendorPhoneObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VendorPhone) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no VendorPhone provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorPhoneColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vendorPhoneInsertCacheMut.RLock()
	cache, cached := vendorPhoneInsertCache[key]
	vendorPhoneInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vendorPhoneAllColumns,
			vendorPhoneColumnsWithDefault,
			vendorPhoneColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vendorPhoneType, vendorPhoneMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vendorPhoneType, vendorPhoneMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"VendorPhone\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"VendorPhone\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into VendorPhone")
	}

	if !cached {
		vendorPhoneInsertCacheMut.Lock()
		vendorPhoneInsertCache[key] = cache
		vendorPhoneInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VendorPhone.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VendorPhone) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vendorPhoneUpdateCacheMut.RLock()
	cache, cached := vendorPhoneUpdateCache[key]
	vendorPhoneUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vendorPhoneAllColumns,
			vendorPhonePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update VendorPhone, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"VendorPhone\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vendorPhonePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vendorPhoneType, vendorPhoneMapping, append(wl, vendorPhonePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update VendorPhone row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for VendorPhone")
	}

	if !cached {
		vendorPhoneUpdateCacheMut.Lock()
		vendorPhoneUpdateCache[key] = cache
		vendorPhoneUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vendorPhoneQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for VendorPhone")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for VendorPhone")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VendorPhoneSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPhonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"VendorPhone\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vendorPhonePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vendorPhone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vendorPhone")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VendorPhone) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no VendorPhone provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorPhoneColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vendorPhoneUpsertCacheMut.RLock()
	cache, cached := vendorPhoneUpsertCache[key]
	vendorPhoneUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			vendorPhoneAllColumns,
			vendorPhoneColumnsWithDefault,
			vendorPhoneColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vendorPhoneAllColumns,
			vendorPhonePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert VendorPhone, could not build update column list")
		}

		ret := strmangle.SetComplement(vendorPhoneAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(vendorPhonePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert VendorPhone, could not build conflict column list")
			}

			conflict = make([]string, len(vendorPhonePrimaryKeyColumns))
			copy(conflict, vendorPhonePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"VendorPhone\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(vendorPhoneType, vendorPhoneMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vendorPhoneType, vendorPhoneMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert VendorPhone")
	}

	if !cached {
		vendorPhoneUpsertCacheMut.Lock()
		vendorPhoneUpsertCache[key] = cache
		vendorPhoneUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VendorPhone record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VendorPhone) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VendorPhone provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vendorPhonePrimaryKeyMapping)
	sql := "DELETE FROM \"VendorPhone\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from VendorPhone")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for VendorPhone")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vendorPhoneQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vendorPhoneQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from VendorPhone")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for VendorPhone")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VendorPhoneSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vendorPhoneBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPhonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"VendorPhone\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorPhonePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vendorPhone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for VendorPhone")
	}

	if len(vendorPhoneAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VendorPhone) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVendorPhone(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VendorPhoneSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VendorPhoneSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPhonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"VendorPhone\".* FROM \"VendorPhone\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorPhonePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VendorPhoneSlice")
	}

	*o = slice

	return nil
}

// VendorPhoneExists checks if the VendorPhone row exists.
func VendorPhoneExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"VendorPhone\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if VendorPhone exists")
	}

	return exists, nil
}

// Exists checks if the VendorPhone row exists.
func (o *VendorPhone) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VendorPhoneExists(ctx, exec, o.ID)
}
