steps:
  - name: 'gcr.io/cloud-builders/git'
    secretEnv: ['SSH_KEY']
    entrypoint: 'bash'
    args:
    - -c
    - |
      echo "$$SSH_KEY" >> /root/.ssh/id_rsa
      chmod 400 /root/.ssh/id_rsa
      cp deployment/known_hosts.github /root/.ssh/known_hosts
    volumes:
    - name: 'ssh'
      path: /root/.ssh

  - id: 'unshallow'
    name: gcr.io/cloud-builders/git  
    entrypoint: 'bash'
    args: 
    - -c 
    - |
      git remote set-url origin "git@github.com:$REPO_FULL_NAME.git"
      git fetch --unshallow
    volumes:
    - name: 'ssh'
      path: /root/.ssh

  - id: 'check-diff'
    name: gcr.io/cloud-builders/gcloud
    entrypoint: /bin/bash
    args:
      - -c
      - |
        bash scripts/delta-changes.sh "$PROJECT_ID" "$TRIGGER_NAME" "$BUILD_ID" "$COMMIT_SHA" "$TRIGGER_NAME" "diff.txt" "$_PREVIOUS_COMMIT_SHA"  || exit 1

  - id: build-service
    name: gcr.io/cloud-builders/docker
    entrypoint: /bin/bash
    args:
      - -c
      - |
        export DOCKER_BUILDKIT=1
        docker build -t ${_GAR_REPO_URL}/${_SERVICE}:${SHORT_SHA} \
          --build-arg APP_ENV=${_TARGET_APP_ENV} \
          -f build/deploy/Dockerfile .

  - id: push-build-service
    name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_GAR_REPO_URL}/${_SERVICE}:${SHORT_SHA}']
    waitFor: ['build-service']
    
  - id: deploy-service
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: /bin/bash
    args:
      - -c 
      - |
        if [[ ${_BUILD_SCOPE} != 'BUILD_IMAGE' ]]; then
          gcloud run deploy ${_RUN_SERVICE_NAME}-${_SERVICE} --image '${_GAR_REPO_URL}/${_SERVICE}:${SHORT_SHA}' \
            --region ${_REGION} || exit 1
        else
          echo "Deploy is skipped because of ${_BUILD_SCOPE}"
        fi
    waitFor: ["push-build-service"]

    # Add latest tags
  - id: add-latest-tag
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: gcloud
    args:
      - 'artifacts'
      - 'docker'
      - 'tags'
      - 'add'
      - '${_GAR_REPO_URL}/${_SERVICE}:${SHORT_SHA}'
      - '${_GAR_REPO_URL}/${_SERVICE}:latest'
    waitFor: ['push-build-service', 'deploy-service']
  
  # backup multi region
  # commit_sha 40char < 140 char
  - id: backup
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        DIFF=$(cat diff.txt | grep -o "database\/migrations\/[_a-zA-Z0-9-]*")
        if [[ $$DIFF ]]; then 
          gcloud sql backups create --location asia -i ${_DB_INSTANCE_ID} \
            --description "Before applying commit: $COMMIT_SHA" || exit 1
        else
          echo "No migration change found. Skip backup" 
        fi
    waitFor: ["check-diff"]

  # Wargning 
  # _BUILD_SCOPE == 'BUILD_IMAGE' will skip applying migration but build will pass.
  # So we have to deploy and run job manually if a commit include migration.
  # Next build pipeline might ignore migration and deploy in case next commit doesnt' include migration file changes. 
  - id: migration
    name: gcr.io/cloud-builders/docker
    secretEnv: ['SERVICE_ACCOUNT_JSON', 'DB_USER', 'DB_PASSWORD']
    entrypoint: /bin/bash
    args:
      - -c
      - |
        if [[ ${_BUILD_SCOPE} != 'BUILD_IMAGE' ]] && cat diff.txt | grep -o "database\/migrations\/[_a-zA-Z0-9-]*"; then
          echo "Detect migration file changes"
          docker run \
          --env GOOSE_MIGRATION_DIR=/migrations
          --env COMMAND=postgres "postgres://$$DB_USER:$$DB_PASSWORD@localhost:5432/primecrm_${_SERVICE}?sslmode=disable" up \
          --env GCP_CREDENTIAL_JSON=$$SERVICE_ACCOUNT_JSON \
          --env CLOUDSQL_INSTANCE=${_DB_INSTANCE_CONNECTION_NAME}=tcp:localhost:5432 \
          --volume /workspace/migrations:/migrations \
          ghcr.io/sultanks4/goose-cloud-sql-proxy:latest
        else
          echo "No migration change found or scope is ${_BUILD_SCOPE}. Skip migration" 
        fi
    waitFor: ["check-diff", "backup"]

substitutions:
  _GAR_REPO_URL:
  _SECRET_NAME_GITHUB_DEPLOY_KEY:
  _SECRET_NAME_BACKEND_CREDENTIALS:
  _SECRET_NAME_DB_USER:
  _SECRET_NAME_DB_PASSWORD:
  _DB_INSTANCE_ID:
  _DB_INSTANCE_CONNECTION_NAME:
  _RUN_SERVICE_NAME: prime-backend
  _SERVICE: 
  _TARGET_APP_ENV: development
  _REGION: asia-northeast1
  # OUT OF TERRAFORM SCOPE
  _PREVIOUS_COMMIT_SHA: 
  _BUILD_SCOPE: 'BUILD_IMAGE'


availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/${_SECRET_NAME_GITHUB_DEPLOY_KEY}/versions/latest
    env: 'SSH_KEY'
  - versionName: projects/$PROJECT_ID/secrets/${_SECRET_NAME_BACKEND_CREDENTIALS}/versions/latest
    env: 'SERVICE_ACCOUNT_JSON'
  - versionName: projects/$PROJECT_ID/secrets/${_SECRET_NAME_DB_USER}/versions/latest
    env: 'DB_USER'
  - versionName: projects/$PROJECT_ID/secrets/${_SECRET_NAME_DB_PASSWORD}/versions/latest
    env: 'DB_PASSWORD'

options:
  machineType: 'UNSPECIFIED'